<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/googletest/docs/_layouts/default.html;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/reference/actions.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/reference/assertions.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/reference/matchers.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/reference/mocking.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/reference/testing.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/advanced.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/community_created_documentation.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/faq.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/gmock_cheat_sheet.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/gmock_cook_book.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/gmock_faq.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/gmock_for_dummies.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/index.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/pkgconfig.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/platforms.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/primer.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/quickstart-bazel.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/quickstart-cmake.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/docs/samples.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/docs/README.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/internal/custom/gmock-generated-actions.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/internal/custom/gmock-matchers.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/internal/custom/gmock-port.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/internal/custom/README.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/internal/gmock-port.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/internal/gmock-pp.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-actions.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-cardinalities.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-function-mocker.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-matchers.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-more-actions.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-more-matchers.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-nice-strict.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock-spec-builders.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/include/gmock/gmock.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/test/gmock-matchers_test.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/test/gmock_leak_test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/test/gmock_link_test.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/test/gmock_output_test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/test/gmock_test_utils.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googlemock/README.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/docs/README.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/custom/gtest-port.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/custom/gtest-printers.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/custom/gtest.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/custom/README.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-filepath.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-internal.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-param-util.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-port-arch.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-port.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-string.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/internal/gtest-type-util.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-assertion-result.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-death-test.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-matchers.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-message.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-param-test.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-printers.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-spi.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-test-part.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest-typed-test.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest_pred_impl.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/include/gtest/gtest_prod.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/samples/prime_tables.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/samples/sample1.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/samples/sample2.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/samples/sample3-inl.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/samples/sample4.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/src/gtest-internal-inl.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-break-on-failure-unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-catch-exceptions-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-color-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-env-var-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-failfast-unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-filter-unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-global-environment-unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-json-outfiles-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-json-output-unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-list-tests-unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-output-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-param-test-invalid-name1-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-param-test-invalid-name2-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-param-test-test.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-setuptestsuite-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-shuffle-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-throw-on-failure-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/googletest-uninitialized-test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest-typed-test_test.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_help_test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_json_test_utils.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_list_output_unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_skip_check_output_test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_skip_environment_check_output_test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_test_utils.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_testbridge_test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_xml_outfiles_test.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_xml_output_unittest.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/gtest_xml_test_utils.py;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/test/production.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/googletest/README.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/CONTRIBUTING.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/googletest/README.md;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Headers/AStarEuc.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Headers/AStarMan.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Headers/BFS.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Headers/DFS.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Headers/Search.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Headers/State.h;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Sources/AStarEuc.cpp;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Sources/AStarMan.cpp;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Sources/BFS.cpp;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Sources/DFS.cpp;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Sources/main.cpp;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Sources/Search.cpp;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/Sources/State.cpp;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver/test/ManTest.cpp" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Al-Sh/CLionProjects/Eight-Puzzle-Solver&quot;:&quot;{\&quot;/googletest/googlemock/test/gmock_output_test.py\&quot;:\&quot;This file tests the text output of the Google C++ Mocking Framework (gmock).\\n\\nKey functions:\\n\\n- ToUnixLineEnding() - Converts line endings to UNIX style.\\n\\n- RemoveReportHeaderAndFooter() - Removes header and footer from gtest output. \\n\\n- RemoveLocations() - Removes file/line location info from output.\\n\\n- NormalizeErrorMarker() - Normalizes error marker for different platforms. \\n\\n- RemoveMemoryAddresses() - Removes memory addresses from output.\\n\\n- RemoveTestNamesOfLeakedMocks() - Removes test names of leaked mocks.\\n\\n- GetLeakyTests() - Gets names of tests that leaked mocks. \\n\\n- GetNormalizedOutputAndLeakyTests() - Normalizes the output and gets leaked tests.\\n\\n- GetShellCommandOutput() - Runs a command and returns output. \\n\\n- GetNormalizedCommandOutputAndLeakyTests() - Runs command and normalizes output.\\n\\n- testOutput() - Runs tests, compares output to golden file and checks for leaks.\\n\\nIt runs the gmock_output_test_ program, normalizes the output, compares to a golden file, and checks for leaked mocks. It can also regenerate the golden file.\&quot;,\&quot;/googletest/googletest/test/gtest_skip_environment_check_output_test.py\&quot;:\&quot;This Python file tests Google Test\\u0027s ability to skip tests based on the environment.\\n\\nIt does the following:\\n\\n1. Imports utilities from googletest.test.gtest_test_utils for running tests and subprocesses.\\n\\n2. Gets the path to the gtest_skip_in_environment_setup_test binary. \\n\\n3. Runs that binary as a subprocess and captures its output.\\n\\n4. Defines a test case class SkipEntireEnvironmentTest that inherits from gtest_test_utils.TestCase\\n\\n5. Defines a test method testSkipEntireEnvironmentTest() that:\\n\\n  - Asserts the output contains a message indicating the entire environment was skipped\\n  - Asserts the output does not contain \\\&quot;FAILED\\\&quot;\\n\\n6. Calls gtest_test_utils.Main() to run the tests\\n\\nKey functions:\\n\\n- gtest_test_utils.GetTestExecutablePath() - Gets path to test binary \\n- gtest_test_utils.Subprocess() - Runs a subprocess and captures output\\n- gtest_test_utils.TestCase - Base class for test cases \\n- gtest_test_utils.Main() - Runs the tests\\n\\nSo in summary, it runs a Google Test program that skips tests based on environment, verifies the output, and acts as a python test for Google Test\\u0027s skipping functionality.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-filepath.h\&quot;:\&quot;This file declares the FilePath class and related functions used internally by Google Test for file and directory path manipulation.\\n\\nKey things:\\n\\n- FilePath is an immutable value object that represents a file or directory path. It handles platform-specific path conventions like separators.\\n\\n- Constructor takes a std::string path. Methods like string(), c_str() access the path.\\n\\n- Static methods for constructing file paths like MakeFileName(), ConcatPaths()\\n\\n- Methods for manipulating paths like RemoveTrailingPathSeparator(), RemoveDirectoryName(), RemoveExtension() \\n\\n- Methods for checking paths like IsDirectory(), IsAbsolutePath(), FileOrDirectoryExists()\\n\\n- Methods for creating directories recursively like CreateDirectoriesRecursively(), CreateFolder()\\n\\n- Normalizes the path by replacing multiple separators with one\\n\\nSo in summary, it provides a class and utilities for working with file system paths that abstracts away platform differences, and includes functions for common path operations needed for Google Test like constructing output file names.\&quot;,\&quot;/googletest/googletest/test/googletest-color-test.py\&quot;:\&quot;This file tests Google Test\\u0027s color output functionality.\\n\\nKey things it does:\\n\\n- Sets up environment variables and command line flags to control whether color is used\\n- Runs a test program (googletest-color-test_) that checks for color output\\n- Asserts the expected behavior based on the environment/flags\\n\\nKey functions:\\n\\n- SetEnvVar() - Sets an environment variable to a given value\\n- UsesColor() - Runs the test program and returns the exit code  \\n- GTestColorTest - Test case class that defines individual tests\\n- testNoEnvVarNoFlag() - Tests default behavior with no env var or flag\\n- testFlagOnly() - Tests behavior when only --gtest_color flag is set\\n- testEnvVarOnly() - Tests behavior when only GTEST_COLOR env var is set  \\n- testEnvVarAndFlag() - Tests precedence when both are set\\n- testAliasesOfYesAndNo() - Tests aliases for yes/no values\\n\\nSo in summary, it systematically tests Google Test\\u0027s color output logic under different configuration scenarios.\&quot;,\&quot;/googletest/googletest/test/googletest-json-outfiles-test.py\&quot;:\&quot;This file contains a unit test for Google Test\\u0027s JSON output functionality.\\n\\nKey things it does:\\n\\n- Sets up a temporary output directory for Google Test to write JSON files to.\\n\\n- Runs two Google Test programs that produce JSON output files.\\n\\n- Validates the JSON output against expected output structures. \\n\\n- Cleans up the temporary output directory after the tests.\\n\\nKey functions:\\n\\n- setUp(): Sets up the temporary output directory.\\n\\n- tearDown(): Cleans up the output directory. \\n\\n- DeleteFilesAndDir(): Deletes any existing files/directory from a previous run.\\n\\n- testOutfile1()/testOutfile2(): Runs each test program and validates the JSON output.\\n\\n- _TestOutFile(): Common function to run a test program, read the JSON output, and validate against the expected output. \\n\\n- normalize(): Function from another module to normalize the JSON for comparison.\\n\\nSo in summary, it sets up a test environment, runs Google Test programs that produce JSON, validates the JSON matches what is expected, and cleans up after itself.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/custom/gtest-printers.h\&quot;:\&quot;This file provides an injection point for custom printers in a local installation of Google Test (gTest).\\n\\nIt will be included from gtest-printers.h and any overrides defined in this file will be visible to code that includes gtest-printers.h.\\n\\nThis allows a local installation of gTest to customize the pretty printing of test results and values without modifying the core gTest source code.\\n\\nThe key things this file does are:\\n\\n- It has a copyright and license header from Google.\\n\\n- It provides include guard macros to prevent multiple inclusions.\\n\\n- It marks an area labeled \\\&quot;// Custom implementation starts here **\\\&quot; where custom printer code can be defined. \\n\\n- It does not define any functions itself, but serves as an injection point for custom printer functions/overrides to be defined within the marked region. Any functions defined there will augment/override the default gTest printers.\\n\\nSo in summary, it provides a customization point but does not contain any code itself - it just marks a place for local custom printer code to be injected to extend the default gTest printers.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-type-util.h\&quot;:\&quot;This file contains type utility functions and types used internally by Google Test for implementing typed and type-parameterized tests.\\n\\nKey things it provides:\\n\\n- CanonicalizeForStdLibVersioning - Canonicalizes type names with respect to the C++ standard library to handle version differences.\\n\\n- GetTypeName - Gets a human-readable name for a type from its type_info, demangling C++ names if needed. \\n\\n- TemplateSel - Helper struct to represent class templates as types. Allows instantiating templates selected at compile-time.\\n\\n- Templates/Types - Tuple-like types to represent lists of templates or types.\\n\\n- GenerateTypeList - Helper to conditionally generate type lists to avoid nesting them.\\n\\n- is_proxy_type_list - Helper to distinguish single types from type lists.\\n\\nIt provides the core types and utilities needed to work with templates and type lists that Google Test uses internally for its typed and type-parameterized tests. The functions help normalize type names, get human-readable names, and represent templates and type lists as compile-time types.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest_prod.h\&quot;:\&quot;This file contains definitions from Google Test that are useful in production code.\\n\\nKey things it provides:\\n\\n- Copyright and license information for Google Test\\n\\n- The FRIEND_TEST macro - This allows test cases to access private and protected members of a class. It declares the test case as a friend of the class being tested, so it has access to private/protected members.\\n\\n- It includes the header guard GOOGLETEST_INCLUDE_GTEST_GTEST_PROD_H_ to prevent multiple inclusions of this header.\\n\\nSo in summary:\\n\\n- It makes testing private/protected members possible via FRIEND_TEST macro\\n- Provides copyright/license for Google Test  \\n- Includes header guard to prevent multiple inclusions\\n\\nThe main function it provides is FRIEND_TEST to enable testing private/protected members from friend test classes. It also sets up the necessary copyright and includes to properly use the Google Test framework in production code.\&quot;,\&quot;/googletest/docs/quickstart-bazel.md\&quot;:\&quot;This file provides a quickstart guide for building a GoogleTest project using the Bazel build system.\\n\\nThe key things it covers are:\\n\\n- Setting up a Bazel workspace - This involves creating a directory for the workspace and adding a WORKSPACE file to declare dependencies. It shows how to add GoogleTest as an external dependency using Bazel\\u0027s http_archive rule.\\n\\n- Creating and building a test binary - It demonstrates writing a simple GoogleTest test case, and then creating BUILD files to build the test as a cc_test target with Bazel. \\n\\n- Running the tests - It shows the Bazel command to build and run the tests, including options to get verbose test output.\\n\\n- Next steps - It points to other GoogleTest documentation for learning more about writing tests and code samples.\\n\\nThe main functions of this file are:\\n\\n- Setting up the environment and prerequisites for using Bazel and GoogleTest\\n- Demonstrating a simple end-to-end workflow of creating a test, building it with Bazel, and running it\\n- Providing references to other documentation to continue learning GoogleTest\\n\\nSo in summary, it serves as a quick introduction and guide for someone new to get a basic GoogleTest project building and running with Bazel.\&quot;,\&quot;/googletest/googletest/samples/sample1.h\&quot;:\&quot;This file is a header file for a sample Google Test program. \\n\\nIt defines two functions that can be tested:\\n\\n1. Factorial(int n) - Returns the factorial of the given integer n. For negative n, it returns 1.\\n\\n2. IsPrime(int n) - Returns true if the given integer n is a prime number, false otherwise. \\n\\nThe key things this header file does:\\n\\n- Includes the Google Test copyright and license information\\n- Prevents multiple inclusions with header guards \\n- Declares the two functions that can be tested (Factorial and IsPrime)\\n- Provides documentation on what the functions do\\n\\nSo in summary, it declares functions that can be tested and includes documentation, without implementing the functions themselves. This allows the functions to be tested separately in a Google Test program.\&quot;,\&quot;/googletest/googletest/test/googletest-global-environment-unittest.py\&quot;:\&quot;This file contains unit tests for Google Test\\u0027s global test environment behavior.\\n\\nKey things it does:\\n\\n- Defines a test program (googletest-global-environment-unittest_) that is used to test the global environment functionality.\\n\\n- Defines a RunAndReturnOutput function that runs the test program and returns the output.\\n\\n- Defines test classes and methods using the Google Test framework:\\n\\n  - GTestGlobalEnvironmentUnitTest is the test class.\\n\\n  - testEnvironmentSetUpFails tests that if the global environment setup fails, all tests are skipped.\\n\\n  - testEnvironmentSetUpAndTornDownForEachRepeat tests that with --gtest_recreate_environments_when_repeating, the environment is set up/torn down each repeat iteration.\\n\\n  - testEnvironmentSetUpAndTornDownOnce tests that without --gtest_recreate_environments_when_repeating, the environment is set up/torn down once.\\n\\n- Main function runs the tests using the Google Test framework.\\n\\nSo in summary, it:\\n\\n1. Defines a test program\\n2. Runs the program and captures output \\n3. Defines Google Test unit tests to validate global environment behavior\\n4. Runs the tests\&quot;,\&quot;/googletest/googlemock/include/gmock/internal/gmock-port.h\&quot;:\&quot;This file (gmock-port.h) contains portability utilities and macros for Google Mock.\\n\\nKey things it does:\\n\\n- Defines macros and utilities for porting Google Mock to different platforms. These are prefixed with GMOCK_ to indicate they are part of Google Mock\\u0027s internal API.\\n\\n- Includes gtest-port.h from Google Test, which contains more general portability utilities shared between Google Test and Google Mock.\\n\\n- Checks compiler version (at least VS 2015 required)\\n\\n- Defines macros for referencing Google Mock command line flags like GMOCK_FLAG_NAME_ and GMOCK_FLAG\\n\\n- Defines macros for defining and declaring boolean, integer and string flags \\n\\n- Contains implementations for getting/setting flag values based on whether Abseil flags or custom flags are being used\\n\\n- All symbols in the internal namespace (no prefixes) are subject to change without notice\\n\\nKey functions/macros:\\n\\n- GMOCK_DEFINE_bool_/int32_/string_ - Define command line flags\\n- GMOCK_DECLARE_bool_/int32_/string_ - Declare command line flags  \\n- GMOCK_FLAG_GET - Get flag value\\n- GMOCK_FLAG_SET - Set flag value\\n\\nSo in summary, it provides portability utilities and implements the command line flag interface for Google Mock.\&quot;,\&quot;/googletest/docs/reference/assertions.md\&quot;:\&quot;This file documents the various assertion macros provided by GoogleTest for verifying code behavior in unit tests.\\n\\nSome key points:\\n\\n- It provides macros that come in EXPECT_ and ASSERT_ variants, with EXPECT_ generating nonfatal failures and ASSERT_ generating fatal failures.\\n\\n- It has macros for verifying boolean conditions, comparing values, comparing strings, floating point comparisons, exception testing, predicate testing, and more. \\n\\n- It includes macros for explicitly generating success or failure, like SUCCEED(), FAIL(), ADD_FAILURE(), etc.\\n\\n- It has specialized macros for things like HRESULT assertions, death tests, and predicate formatters that generate custom failure messages.\\n\\nKey assertion macros include:\\n\\n- EXPECT_TRUE/ASSERT_TRUE \\n- EXPECT_FALSE/ASSERT_FALSE\\n- EXPECT_EQ/ASSERT_EQ\\n- EXPECT_NE/ASSERT_NE \\n- EXPECT_LT/ASSERT_LT\\n- EXPECT_LE/ASSERT_LE\\n- EXPECT_GT/ASSERT_GT \\n- EXPECT_GE/ASSERT_GE\\n- EXPECT_STREQ/ASSERT_STREQ\\n- EXPECT_THROW/ASSERT_THROW\\n- EXPECT_ANY_THROW/ASSERT_ANY_THROW\\n- EXPECT_NO_THROW/ASSERT_NO_THROW\\n- EXPECT_PRED*/ASSERT_PRED*\\n- EXPECT_DEATH/ASSERT_DEATH\\n- EXPECT_EXIT/ASSERT_EXIT\\n\\nSo in summary, it documents all the key assertion macros provided by GoogleTest for validating test expectations and failures in unit tests.\&quot;,\&quot;/Sources/DFS.cpp\&quot;:\&quot;This file implements depth-first search (DFS) for solving a grid-based pathfinding problem.\\n\\nThe key functions are:\\n\\n- DFS constructor: Initializes the DFS object with the input grid.\\n\\n- dfs(): Implements the core DFS algorithm. It uses a stack (frontier) to keep track of nodes to explore. It recursively explores neighbors of nodes until it finds the goal or exhausts all possibilities.\\n\\n- search(): Runs the full DFS search. It times the search, counts nodes expanded, and constructs the solution path if a goal is found. \\n\\n- getNeighbors(): Returns the neighbor states of a given state. This depends on the problem domain.\\n\\n- gridToState(): Converts the input grid to a state representation used by the search. \\n\\n- treeToSteps(): Constructs the solution path by backtracking through the parent mapping built during search.\\n\\nSo in summary, it implements the standard DFS algorithm using a stack, tracks search metrics, and has domain-specific functions to handle the state space representation and neighbor generation for the grid pathfinding problem.\&quot;,\&quot;/googletest/googletest/test/googletest-env-var-test.py\&quot;:\&quot;This file tests how Google Test (gtest) parses environment variables to set test flags.\\n\\nKey things it does:\\n\\n- Sets up environment variables to test different flag values\\n- Runs a gtest test program and captures the output to check flag values\\n- Defines functions to help with setting env vars and running/checking the test program\\n\\nKey functions:\\n\\n- SetEnvVar() - Sets or unsets an environment variable\\n- GetFlag() - Runs the test program and returns the value of a flag \\n- TestFlag() - Tests that a flag takes the env var value or default\\n- AssertEq() - Asserts two values are equal, fails test if not\\n- Main() - gtest test runner entry point\\n\\nIt tests that each supported flag (break_on_failure, color, etc) takes the value from the corresponding env var name if set (GTEST_COLOR), or the default if not set. It also checks that XML_OUTPUT_FILE sets the output flag, and is overridden by GTEST_OUTPUT if both are set.\\n\\nSo in summary, it verifies gtest\\u0027s behavior of parsing environment variables to configure test flags.\&quot;,\&quot;/Headers/AStarMan.h\&quot;:\&quot;This file defines the AStarMan class that implements the A* search algorithm for solving the 8-puzzle problem.\\n\\nKey functions:\\n\\n- search() - The main search function that runs A* to find a solution path.\\n\\n- heuristic(state) - Calculates the heuristic value (estimated distance to goal) for a given state. This is used to order states in the priority queue. \\n\\n- aStar() - The core A* search logic. Expands states from the priority queue, tracks explored states, updates parent mappings, etc.\\n\\nOther notable things:\\n\\n- Stores the start state, goal state, priority queue, parent mappings, explored set.\\n\\n- Tracks and stores metrics about the search like path cost, nodes expanded, max depth, runtime.\\n\\n- Uses a priority queue ordered by f(n) \\u003d g(n) + h(n) where g(n) is path cost and h(n) is the heuristic.\\n\\nSo in summary, it implements the full A* search algorithm to solve the 8-puzzle problem, tracking relevant data and metrics.\&quot;,\&quot;/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\&quot;:\&quot;This file contains internal utilities used by Google Mock for implementing mock classes and matchers.\\n\\nKey functions/classes:\\n\\n- JoinAsKeyValueTuple - Joins a vector of strings as fields of a tuple\\n- ConvertIdentifierNameToWords - Converts an identifier name to lowercase words\\n- GetRawPointer - Gets the raw pointer from a smart pointer \\n- TypeKind - Enum for classifying types as bool, integer, floating point, other\\n- KindOf - Template to get the TypeKind of a type\\n- LosslessArithmeticConvertible - Checks if one type can be losslessly converted to another\\n- FailureReporterInterface - Interface for reporting test failures\\n- Assert, Expect - Macros for assertions and expectations\\n- LogSeverity, LogIsVisible, Log - Logging functions\\n- WithoutMatchers - Marker class used to resolve parameterless expectations\\n- Invalid - Expression that will abort if evaluated \\n- StlContainerView - Adapts a raw container to STL container view\\n- Function - Metafunction class describing a function signature\\n- Apply - Applies a function to a tuple of arguments\\n\\nSo in summary, it contains various utilities for working with types, reporting failures, logging, and adapting containers - primarily for internal use in implementing Google Mock features.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-param-test.h\&quot;:\&quot;This file defines macros and functions for implementing parameterized tests in Google Test.\\n\\nKey things it does:\\n\\n- Defines TestWithParam class that parameterized test fixtures inherit from to access test parameters via GetParam()\\n\\n- Defines TEST_P macro to define parameterized test cases \\n\\n- Defines INSTANTIATE_TEST_SUITE_P macro to instantiate a parameterized test suite with different parameter values\\n\\n- Defines parameter generators like Values(), Range(), Bool() to generate sequences of parameter values\\n\\n- Defines Combine() to generate Cartesian products of parameter sequences \\n\\n- Defines ConvertGenerator() to cast parameter values to a specific type\\n\\n- Defines GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST to mark a parameterized test class as not needing instantiation\\n\\nKey functions:\\n\\n- Values(), Range(), Bool() - Generate sequences of basic parameter values\\n- ValuesIn() - Generate values from a container \\n- Combine() - Generate Cartesian products of parameter sequences\\n- ConvertGenerator() - Cast parameter values to a type\\n- INSTANTIATE_TEST_SUITE_P - Instantiate tests with generated parameters\\n- TEST_P - Define a parameterized test case\\n\\nSo in summary, it provides the infrastructure and macros for defining and instantiating parameterized tests in Google Test.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-nice-strict.h\&quot;:\&quot;This file defines classes NiceMock, NaggyMock and StrictMock in the testing namespace.\\n\\nThese classes modify the default behavior of Google Mock mocks to:\\n\\n- NiceMock: Allows uninteresting/unexpected calls without errors or warnings.\\n- NaggyMock: Prints warnings for uninteresting/unexpected calls. \\n- StrictMock: Treats uninteresting/unexpected calls as errors.\\n\\nThe key things it does:\\n\\n- Defines base classes (NiceMockImpl, NaggyMockImpl, StrictMockImpl) that register/deregister with the Mock object to modify its call reaction behavior.\\n\\n- The modifier classes (NiceMock, NaggyMock, StrictMock) inherit privately from the corresponding base class and publicly from the mock class. This ensures the base class behavior is applied.\\n\\n- The constructors and destructors call the registration/deregistration functions to apply the modification during the mock object\\u0027s lifetime.\\n\\n- It uses empty base class optimization to avoid any size increase from the inheritance.\\n\\n- Provides constructors that forward arguments to the mock class constructor.\\n\\nSo in summary, it allows creating subclasses of mocks that modify their default reaction to uninteresting calls in a clean way via inheritance. The key functions are the constructor/destructor implementations.\&quot;,\&quot;/googletest/googletest/test/googletest-catch-exceptions-test.py\&quot;:\&quot;This Python file tests Google Test\\u0027s ability to catch and handle exceptions.\\n\\nKey things it does:\\n\\n- Runs two Google Test test programs - one compiled with exceptions enabled, one disabled. It verifies the output matches expectations.\\n\\n- Defines test classes CatchSehExceptionsTest and CatchCxxExceptionsTest. These contain individual test methods that verify specific exception scenarios are caught and handled properly.\\n\\n- CatchSehExceptionsTest tests SEH (Structured Exception Handling) exceptions on Windows. It verifies they are caught at different points in the test lifecycle.\\n\\n- CatchCxxExceptionsTest tests C++ exceptions. It has test methods that validate exceptions thrown from fixture constructor/destructor, SetUp/TearDown methods, and test bodies are caught properly. \\n\\n- It also has a test to ensure uncaught C++ exceptions terminate the program as expected.\\n\\nKey functions:\\n\\n- GetTestExecutablePath - Gets the path to the compiled Google Test test binaries\\n- Subprocess - Runs a test binary and captures output\\n- Main - Runs the test suite\\n- Individual test methods like testCatchesCxxExceptionsInFixtureConstructor that validate specific exception scenarios.\\n\\nSo in summary, it is a Python test suite that exercises Google Test\\u0027s exception handling capabilities by throwing exceptions at different points and validating they are caught and handled as expected.\&quot;,\&quot;/googletest/googletest/test/gtest_testbridge_test.py\&quot;:\&quot;This file tests Google Test\\u0027s ability to filter tests based on environment variables passed via the testbridge.\\n\\nKey things it does:\\n\\n- Defines a test binary name and command to run it\\n- Defines the name of the environment variable used for test filtering\\n- Implements a test case class that inherits from gtest_test_utils.TestCase\\n- The main test method runs the test binary via subprocess, setting the filter env var  \\n- It asserts that the filter string is printed in the output\\n- And that only the expected test is run/passed\\n\\nKey functions:\\n\\n- Assert - simple assertion function\\n- Subprocess - runs a command and captures output \\n- Main - runs the tests\\n\\nSo in summary, it:\\n\\n1. Sets up a test binary \\n2. Runs it via subprocess while setting a filter env var\\n3. Asserts the output only contains the expected filtered test\\n\\nTesting that Google Test correctly filters tests based on the testbridge environment.\&quot;,\&quot;/googletest/googletest/test/googletest-param-test-invalid-name1-test.py\&quot;:\&quot;This Python file is a Google Test (gtest) test that verifies the behavior when a parameterized test name is invalid.\\n\\nKey things it does:\\n\\n- Defines a COMMAND variable with the path to the test binary being tested. This binary is expected to have a parameterized test with an invalid name.\\n\\n- Defines an Assert function to raise an assertion error if a condition is false.\\n\\n- Defines a TestExitCodeAndOutput function that runs the COMMAND, verifies it exited with a signal, and checks the output contains an expected error message. \\n\\n- Defines a GTestParamTestInvalidName1Test test class that inherits from TestCase. \\n\\n- The test class contains a single test method testExitCodeAndOutput that calls TestExitCodeAndOutput to run the test binary and assert the results.\\n\\n- The main function runs the tests using the gtest_test_utils Main function.\\n\\nSo in summary, it:\\n\\n- Sets up the test binary to run\\n- Defines assertion helpers \\n- Implements a test that runs the binary and validates the expected failure behavior\\n- Runs the tests\&quot;,\&quot;/Sources/AStarMan.cpp\&quot;:\&quot;This file implements the A* search algorithm to solve the 8-puzzle problem.\\n\\nKey functions:\\n\\n- AStarMan constructor: Initializes the AStarMan object with the initial grid state.\\n\\n- aStar(): Implements the main A* search logic. Expands nodes from a priority queue, tracks explored/frontier states, and builds the parent map.\\n\\n- search(): Runs the aStar() method, times it, and extracts the solution path from the parent map if a solution is found.\\n\\n- heuristic(): Implements the Manhattan distance heuristic function to estimate cost to goal for A*.\\n\\n- getNeighbors(): Not shown, but would return the legal neighbor states of a given state. \\n\\n- gridToState(): Not shown, but converts the grid representation to a single integer state encoding.\\n\\n- treeToSteps(): Not shown, but reconstructs the solution path from the parent map.\\n\\nSo in summary, it implements the core A* search algorithm using a priority queue and parent map to solve the 8-puzzle problem, with Manhattan distance as the heuristic.\&quot;,\&quot;/googletest/docs/reference/actions.md\&quot;:\&quot;This file documents the built-in actions provided by GoogleTest for specifying behavior of mock functions.\\n\\nKey points:\\n\\n- Actions specify what a mock function should do when invoked. They are defined in the ::testing namespace.\\n\\n- It lists various actions for returning values, performing side effects, invoking other functions/lambdas as actions, and using default actions.\\n\\n- Some key actions include:\\n  - Return(), ReturnArg(), ReturnNew() for returning values\\n  - Assign(), DeleteArg(), SaveArg() for side effects\\n  - Invoke(), InvokeWithoutArgs() to invoke other functions\\n  - DoDefault() to use the default action\\n  - Composite actions like DoAll(), WithArgs() to combine actions\\n\\n- It describes how to define custom actions using the ACTION*, ACTION_P(), ACTION_Pk() macros.\\n\\nSo in summary, this file documents all the built-in actions provided by GoogleTest that can be used to specify the behavior of mock functions when writing tests with Google Mock. It\\u0027s a reference for all the different action types one can use when setting expectations on mock functions.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-more-actions.h\&quot;:\&quot;This file defines additional commonly used variadic action macros for Google Mock.\\n\\nKey things it does:\\n\\n- Defines ACTION_TEMPLATE macro for creating action templates that can take both template and value parameters. This allows actions to be parameterized in additional ways beyond just value parameters.\\n\\n- Defines macros and helper macros to support the implementation of ACTION_TEMPLATE. This includes macros for declaring/listing template parameters, declaring/initializing value parameters, etc.\\n\\n- Defines GMOCK_ACTION_CLASS_ macro to generate the name of the class implementing an action template.\\n\\n- Implements ACTION_TEMPLATE to define a class template for the action that implements the PerformImpl method.\\n\\n- Defines InvokeArgument action that invokes a callable argument of the mock function, passing additional arguments. \\n\\nKey functions:\\n\\n- ACTION_TEMPLATE - Macro for defining action templates\\n- InvokeArgument - Action that invokes a callable argument of the mock function\\n- GMOCK_ACTION_CLASS_ - Generates name of class implementing an action template\\n- gmock_PerformImpl - Method implemented by action templates to perform the action\\n\\nSo in summary, it provides macros and infrastructure to support defining parameterized action templates in Google Mock along with some commonly used variadic actions like InvokeArgument.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-param-util.h\&quot;:\&quot;This file defines utilities for implementing parameterized tests in Google Test.\\n\\nKey things it does:\\n\\n- Defines types and classes for representing parameterized test parameters, generators, and iterators over generated values.\\n\\n- ParamGeneratorInterface - Interface for generators that generate sequences of parameter values.\\n\\n- ParamGenerator - Wraps a ParamGeneratorInterface and provides STL-like iterator access to generated values. \\n\\n- RangeGenerator - Generates values in a range between two values.\\n\\n- ValuesInIteratorRangeGenerator - Generates values from an STL iterator range. \\n\\n- ParameterizedTestSuiteInfo - Stores info about tests and generators for a test suite. Registers tests.\\n\\n- ParameterizedTestSuiteRegistry - Global registry of test suites.\\n\\n- TEST_P, INSTANTIATE_TEST_SUITE_P macros add tests/generators to ParameterizedTestSuiteInfo.\\n\\nKey functions:\\n\\n- Begin(), End() - Get iterators for generator\\u0027s sequence.\\n\\n- AddTestPattern(), AddTestSuiteInstantiation() - Add test/generator info to ParameterizedTestSuiteInfo.  \\n\\n- RegisterTests() - Register tests with all parameter values.\\n\\n- GetTestSuitePatternHolder() - Get/create ParameterizedTestSuiteInfo for a suite.\\n\\nSo in summary, it provides the core infrastructure for defining and running parameterized tests in Google Test.\&quot;,\&quot;/Headers/Search.h\&quot;:\&quot;This header file declares functions related to search algorithms for solving the 8-puzzle problem.\\n\\nKey functions:\\n\\n- treeToSteps(): Takes in a parent map that records the parent state of each node in the search tree. Returns a vector of vectors of ints representing the step-by-step solution from the goal state back to the initial state.\\n\\nThere are two overloads:\\n\\n1. Takes a map from state ID to parent state ID. \\n\\n2. Takes a map from state ID to a pair containing the parent state ID and the move (direction) to get from parent to this state.\\n\\nThis function reconstructs the solution path by traversing the parent links in the search tree.\\n\\nThe header includes necessary data structures like unordered_map, vector and the State class header. It also includes algorithm and vector headers needed for the treeToSteps function implementation.\\n\\nSo in summary, this header declares functions to reconstruct the solution path from the search tree generated by algorithms like BFS, DFS, A* etc when solving the 8-puzzle problem.\&quot;,\&quot;/Sources/BFS.cpp\&quot;:\&quot;This file implements breadth-first search (BFS) for solving a grid-based pathfinding problem.\\n\\nKey functions:\\n\\n- BFS constructor: Initializes the BFS object with the starting grid state.\\n\\n- bfs(): Performs the actual BFS algorithm. Expands nodes in a breadth-first manner from a queue (frontier), tracking explored nodes and parent mappings. Returns true if goal is found.\\n\\n- search(): Runs the full BFS search. Times it, handles success/failure, and populates result fields like path, cost, nodes expanded, runtime. \\n\\n- getNeighbors(): Returns neighbor states for a given state (not shown).\\n\\n- gridToState(): Converts grid to internal state representation (not shown). \\n\\n- treeToSteps(): Reconstructs the path from the parent mapping (not shown).\\n\\nSo in summary, it performs a standard BFS algorithm to solve the pathfinding problem, tracking various search metrics, and provides a clean interface through the search() method. The grid representation and state space details are abstracted away.\&quot;,\&quot;/test/ManTest.cpp\&quot;:\&quot;This file contains unit tests for the Manhattan distance heuristic function of the AStarMan class.\\n\\nKey things:\\n\\n- It includes the necessary header files for gtest, AStarMan, State, and Search classes.\\n\\n- There are 30 TEST cases named ManhattanDistance with different test grids. \\n\\n- Each test:\\n  - Creates an AStarMan object with the given grid\\n  - Converts the grid to a state \\n  - Calls the heuristic() function of AStarMan\\n  - Asserts that the returned value matches the expected Manhattan distance\\n\\n- This tests the ManhattanDistance heuristic function for a variety of grid configurations to ensure it is calculating the distance correctly.\\n\\nKey functions tested:\\n\\n- AStarMan::heuristic() - Calculates the Manhattan distance heuristic for a given state\\n- gridToState() - Converts a grid vector to a state integer \\n- ASSERT_EQ() - Asserts the expected and actual values are equal\\n\\nSo in summary, this file contains unit tests to validate the Manhattan distance heuristic calculation for the AStarMan search algorithm.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-message.h\&quot;:\&quot;This file defines the Message class in Google Test (gtest).\\n\\nThe Message class allows streaming multiple values to a message object, similar to how you can stream to an ostream. It then allows streaming the entire message to an ostream.\\n\\nKey functions:\\n\\n- Message() - Constructs an empty message object.\\n- operator\\u003c\\u003c - Overloaded to allow streaming values of different types to a Message object.\\n- GetString() - Gets the text streamed to the message so far as a string.\\n- operator\\u003c\\u003c - Overloaded to stream an entire Message to an ostream. \\n\\nThe main purpose of Message is to allow building up a string containing multiple streamed values, and then outputting that full string. This is useful for things like assertion failure messages in gtest where you want to stream multiple values describing the failure.\\n\\nIt handles some special cases like streaming pointers and converting non-string values to strings when extracting the final message text.\\n\\nSo in summary, it provides a streaming interface to build up and output text messages in gtest assertions and tests.\&quot;,\&quot;/Headers/State.h\&quot;:\&quot;This header file defines functions related to representing the state of an 8-puzzle problem.\\n\\nKey functions:\\n\\n- getNeighbors(unsigned int state): Takes a state representation as an integer and returns a vector of neighboring states that can be reached with a single move.\\n\\n- gridToState(const std::vector\\u003cint\\u003e \\u0026grid): Takes a grid representation as a vector and converts it to a single integer state representation. \\n\\n- stateToGrid(const unsigned int \\u0026state): Takes a state integer and converts it back to a grid representation as a vector.\\n\\nSo in summary, it provides functions to:\\n\\n1. Convert between grid and integer state representations \\n2. Get the neighbor states that can be reached from a given state\\n\\nThis allows the 8-puzzle problem state space to be represented compactly as integers while still maintaining the ability to visualize states as grids when needed. The neighbor function is also important for searching the state space.\&quot;,\&quot;/googletest/docs/index.md\&quot;:\&quot;This file is the user\\u0027s guide documentation for GoogleTest, Google\\u0027s C++ testing and mocking framework.\\n\\nThe key functions of this file are:\\n\\n- Provides an introduction and welcome to GoogleTest.\\n\\n- Lists the different sections/topics covered in the user\\u0027s guide documentation, which teach users how to use GoogleTest\\u0027s features.\\n\\n- The sections cover topics like writing simple tests, advanced usage, samples, FAQs, mocking basics, common mocking patterns, and mocking reference guides. \\n\\n- Acts as a landing page/table of contents for the GoogleTest user documentation, directing users to the relevant sections based on their experience level and needs (beginner, advanced, reference material etc).\\n\\n- Gives users an overview of the capabilities and features of GoogleTest, and points them to documentation that teaches how to utilize those features through examples, guides, recipes and references.\\n\\nSo in summary, this file serves as the entry point and navigation guide for the GoogleTest user documentation, orienting users and linking to relevant sections based on their testing and mocking needs.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-matchers.h\&quot;:\&quot;This file defines matchers for Google Mock, Google\\u0027s C++ testing framework.\\n\\nKey things it does:\\n\\n- Defines macros like MATCHER, MATCHER_P, etc for defining custom matchers. These macros generate boilerplate code for implementing the MatcherInterface.\\n\\n- Defines common matchers like Eq(), Ne(), etc that can be used out of the box.\\n\\n- Defines polymorphic matcher wrappers like MakePolymorphicMatcher() that allow matchers to work with multiple argument types. \\n\\n- Defines utilities for working with matchers like MatcherCast(), SafeMatcherCast(), DescribeMatcher(), etc.\\n\\n- Defines container matchers like ElementsAre(), Pointwise(), Contains(), Each(), etc.\\n\\n- Defines matchers for optional, variant, any types like Optional(), VariantWith(), AnyWith(). \\n\\n- Defines exception matchers like Throws(), ThrowsMessage().\\n\\n- Defines macros like ASSERT_THAT, EXPECT_THAT to use matchers in tests.\\n\\nSo in summary, it provides the core matcher implementation and common matchers that Google Mock relies on for its expectation and assertion matching capabilities.\&quot;,\&quot;/googletest/googletest/samples/sample2.h\&quot;:\&quot;This file defines a simple string class called MyString that wraps a C-style null-terminated string.\\n\\nKey things:\\n\\n- It includes the googletest header for testing\\n- MyString has private data member c_string_ to store the C string \\n- Static CloneCString function to clone a C string\\n- Default, copy, and destructor constructors\\n- Set method to set the internal C string\\n- c_string and Length methods to access the string\\n- The class is intended to be final so the destructor isn\\u0027t virtual\\n\\nKey functions:\\n\\n- CloneCString - Clones a C string \\n- Set - Sets the internal C string\\n- c_string - Gets the internal C string\\n- Length - Gets the length of the string\\n- Default, copy and destructor constructors\\n\\nSo in summary, it defines a simple string class that wraps a C string for use in google tests. The key functions provide construction, copying and accessing the underlying C string.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-actions.h\&quot;:\&quot;This file defines actions that can be used with Google Mock to specify behavior of mocked functions.\\n\\nSome key things it does:\\n\\n- Defines the Action class template that represents an action that can be performed by a mock function.\\n\\n- Defines common actions like Return(), ReturnNull(), DoDefault(), etc. These are implemented as polymorphic actions.\\n\\n- Defines macros like ACTION(), ACTION_P(), ACTION_P2() etc to define parameterized actions.\\n\\n- Defines utilities like ByRef(), ByMove(), Unused etc. \\n\\n- Defines composable actions like DoAll(), WithArgs() etc.\\n\\n- Defines actions that operate on mock function arguments like SaveArg(), SetArgReferee() etc.\\n\\n- Defines actions that return mock function arguments like ReturnArg().\\n\\n- Defines actions that throw exceptions like Throw().\\n\\n- Defines OnceAction to allow actions to be used with WillOnce().\\n\\n- Defines DefaultValue to specify default return values for mock functions.\\n\\nSo in summary, it provides the core action implementation and common actions that can be used to specify the behavior of mocked functions when used with Google Mock expectations.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-internal.h\&quot;:\&quot;This file declares internal functions and macros used by Google Test. Some key things it does:\\n\\n- Defines macros and functions for writing tests like TEST(), TEST_F(), EXPECT_EQ(), ASSERT_TRUE(), etc. \\n\\n- Defines types like TestInfo, TestPartResult, Message that are used for representing test results.\\n\\n- Defines utilities for comparing values like ArrayEq(), CopyArray() to handle native arrays.\\n\\n- Defines the NativeArray class to adapt native arrays to STL-style containers.\\n\\n- Defines macros for throwing and catching exceptions in tests like TEST_THROW(), TEST_ANY_THROW().\\n\\n- Defines macros to report test failures like GTEST_FATAL_FAILURE_, GTEST_NONFATAL_FAILURE_.\\n\\n- Defines macros to suppress warnings like GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_. \\n\\n- Defines types and utilities used internally by Google Test like CodeLocation, TypeId, IgnoredValue, Random.\\n\\n- Implements type-parameterized tests using templates like TypeParameterizedTest, TypeParameterizedTestSuite.\\n\\n- Defines the Test and TestInfo classes that represent a test and its metadata.\\n\\nSo in summary, it provides the core data structures and utilities needed to implement the Google Test framework. All the macros that are used to write tests are defined here.\&quot;,\&quot;/googletest/googletest/test/googletest-filter-unittest.py\&quot;:\&quot;This file contains unit tests for Google Test\\u0027s test filtering functionality.\\n\\nKey things it does:\\n\\n- Defines constants like environment variable and flag names used for filtering\\n- Utilities for running the test program with different filters and environments\\n- Tests different filtering patterns and behaviors:\\n  - Default with no filter\\n  - Empty filter \\n  - Full name filter\\n  - Wildcards\\n  - Negative filters\\n  - Filtering by test case/test name\\n  - Flag overrides env var\\n  - Sharding with different numbers of shards\\n- Checks tests run match expected set for each filter\\n- Tests disabled tests banner only includes disabled tests matching filter\\n- Tests shard status file is created if specified\\n\\nKey functions:\\n\\n- RunAndReturnOutput() - Runs test program and returns output\\n- RunAndExtractTestList() - Runs and parses tests that were run  \\n- SetEnvVar() - Sets/unsets env var\\n- RunWithSharding() - Runs a sharded test and parses output\\n- Various test methods like testDefaultBehavior(), testFilterByTestCase()\\n\\nSo in summary, it contains a comprehensive set of unit tests to validate Google Test\\u0027s test filtering functionality works as expected for different filtering patterns, environments, and with sharding enabled.\&quot;,\&quot;/googletest/googletest/test/gtest-typed-test_test.h\&quot;:\&quot;This file is for testing Google Test\\u0027s typed test feature.\\n\\nKey things it does:\\n\\n- Defines a template test fixture class ContainerTest that will be instantiated for different types.\\n\\n- Declares a typed test suite for ContainerTest using TYPED_TEST_SUITE_P.\\n\\n- Defines two typed tests - CanBeDefaultConstructed and InitialSizeIsZero - that will run for each type instantiated. \\n\\n- Registers the typed tests using REGISTER_TYPED_TEST_SUITE_P so they will be run.\\n\\nKey functions:\\n\\n- TYPED_TEST_SUITE_P - Declares a typed test suite for ContainerTest\\n- TYPED_TEST_P - Defines a typed test that will run for each type\\n- REGISTER_TYPED_TEST_SUITE_P - Registers the typed tests so they will be run\\n- ContainerTest - The template test fixture class that will be instantiated for different types\\n\\nSo in summary, it sets up a template test fixture class and declares/registers typed tests that will run for each type instantiated of that fixture class. This allows testing code parameterized by type.\&quot;,\&quot;/googletest/docs/primer.md\&quot;:\&quot;This file is a primer or introduction to using GoogleTest, which is Google\\u0027s C++ testing framework.\\n\\nSome key things it covers:\\n\\n- Why use GoogleTest - advantages like independence, organization, portability of tests\\n- Basic concepts like assertions, tests, test suites, test fixtures\\n- How to write simple tests using TEST() macro\\n- How to group related tests into test fixtures using TEST_F() macro \\n- How to define and use test fixtures to share setup/teardown across tests\\n- How to invoke all tests using RUN_ALL_TESTS()\\n- A boilerplate main() function to integrate tests\\n\\nSome key functions/macros it describes:\\n\\n- Assertion macros like ASSERT_EQ, EXPECT_EQ to make assertions \\n- TEST() macro to define a simple test\\n- TEST_F() macro to define a test that uses a fixture\\n- RUN_ALL_TESTS() to run all tests\\n- Test fixture class that inherits from testing::Test\\n- SetUp() and TearDown() methods for fixture setup/teardown\\n\\nSo in summary, it provides an introduction and overview of the basic concepts and APIs for writing and running unit tests with GoogleTest.\&quot;,\&quot;/googletest/docs/gmock_cheat_sheet.md\&quot;:\&quot;This file is a cheat sheet for using Google Mock (gMock), which is a mocking framework for C++ unit tests.\\n\\nSome key things it covers:\\n\\n- Defining mock classes for normal classes and class templates. It shows how to use MOCK_METHOD to mock member functions.\\n\\n- Creating \\\&quot;nice\\\&quot;, \\\&quot;naggy\\\&quot;, and \\\&quot;strict\\\&quot; mock objects using NiceMock, NaggyMock, StrictMock.\\n\\n- Setting default actions for mock functions using ON_CALL and DefaultValue. \\n\\n- Setting expectations on mock functions using EXPECT_CALL and matchers.\\n\\n- Cardinalities (Times clause) and expectation order (After, InSequence).\\n\\n- Verifying and resetting mocks using VerifyAndClearExpectations, VerifyAndClear. \\n\\n- Mock classes like MockFunction that can mock any function signature.\\n\\n- Useful gMock flags like --gmock_catch_leaked_mocks.\\n\\nSo in summary, it provides a quick reference for the key functions and concepts needed to define, set up expectations for, and verify mock objects when using Google Mock for C++ unit tests.\&quot;,\&quot;/googletest/docs/gmock_for_dummies.md\&quot;:\&quot;This file provides documentation on how to use Google Mock (gMock), Google\\u0027s mocking framework for C++ unit tests.\\n\\nSome key things it covers:\\n\\n- What is a mock object and why they are useful for testing. Mocks allow you to isolate the code under test from its dependencies.\\n\\n- Why gMock was created - to make mocking easier in C++ like frameworks in other languages like Java. \\n\\n- How to define a mock class using the MOCK_METHOD macro. This generates the mock method stubs.\\n\\n- How to set expectations on mock methods using EXPECT_CALL. This specifies how the mock should behave.\\n\\n- Matchers that can be used in expectations to match arguments flexibly.\\n\\n- Cardinalities like Times() to specify how many times a method will be called. \\n\\n- Actions like WillOnce() and WillRepeatedly() to specify the return value or behavior of mock methods.\\n\\n- How to specify ordered vs unordered calls using InSequence.\\n\\n- That expectations are \\\&quot;sticky\\\&quot; by default in gMock.\\n\\n- How to handle uninteresting calls that don\\u0027t need expectations.\\n\\nSo in summary, it provides an introduction to the key concepts and functions needed to get started with writing and using mocks with gMock - defining mock classes, setting expectations, and writing tests that exercise code using mocks.\&quot;,\&quot;/googletest/googletest/test/googletest-break-on-failure-unittest.py\&quot;:\&quot;This file contains unit tests for Google Test\\u0027s break-on-failure mode.\\n\\nThe key things it does:\\n\\n- Tests that Google Test will cause a segmentation fault when an assertion fails, if the GTEST_BREAK_ON_FAILURE environment variable or --gtest_break_on_failure flag is set appropriately.\\n\\n- Runs a test program called googletest-break-on-failure-unittest_ that contains failing assertions. It checks if running this program causes a segfault, depending on the environment/flags.\\n\\n- Sets up the GTEST_BREAK_ON_FAILURE environment variable before each test using SetEnvVar().\\n\\n- Runs the test program with Run() and checks if it was terminated by a signal using RunAndVerify().\\n\\n- Tests different combinations of environment variable and flag values.\\n\\n- Checks that the flag overrides the environment variable.\\n\\n- Checks that break-on-failure overrides throw-on-failure mode. \\n\\n- Checks catch-exceptions mode doesn\\u0027t interfere.\\n\\nKey functions:\\n\\n- RunAndVerify() - Runs the test program and verifies expected segfault behavior\\n- Run() - Runs a command and returns exit code \\n- SetEnvVar() - Sets an environment variable\\n- Main() - Standard Google Test main function\\n\\nSo in summary, it tests Google Test\\u0027s break-on-failure mode by running a test program that should cause failures, under different configurations controlled by environment variables and flags.\&quot;,\&quot;/googletest/docs/reference/mocking.md\&quot;:\&quot;This file documents the mocking facilities provided by GoogleTest (gmock) for creating and working with mock objects in C++ tests.\\n\\nSome key things it covers:\\n\\n- Macros for defining mock methods and setting expectations:\\n  - MOCK_METHOD - Defines a mock method for a class\\n  - EXPECT_CALL - Sets an expectation that a mock method will be called\\n- Classes for working with mocks:\\n  - NiceMock/NaggyMock/StrictMock - Control warning/failure behavior of mocks\\n  - DefaultValue - Sets default return values for mock methods\\n  - Sequence - Represents call order of expectations\\n  - Expectation/ExpectationSet - Represent single/set of expectations\\n- Modifier clauses for expectations:\\n  - Times - Specify call count expectation\\n  - WillOnce/WillRepeatedly - Set return actions\\n  - After - Specify prerequisite expectations\\n- ON_CALL - Define default behavior of mock methods without expectations\\n\\nIt provides documentation and examples for how to use these mocking facilities to define mocks, set up expectations of their behavior, and verify calls in tests with Google Test\\u0027s assertion macros. The goal is to allow testing code that depends on interfaces or components defined by other code.\&quot;,\&quot;/googletest/docs/advanced.md\&quot;:\&quot;This file documents advanced topics and best practices for using Google Test, Google\\u0027s C++ testing framework.\\n\\nSome of the key sections and functions it covers include:\\n\\n- More Assertions - Describes additional assertion macros beyond the basic EXPECT_EQ/ASSERT_EQ style ones. Includes things like exception assertions, predicate assertions, floating point comparisons, etc.\\n\\n- Death Tests - Explains how to write tests that expect a program to crash or terminate unexpectedly. Covers death test macros like ASSERT_DEATH. \\n\\n- Typed Tests - Explains how to write tests that can be repeated over different type parameters without duplicating test code. Uses TYPED_TEST.\\n\\n- Value-Parameterized Tests - Allows writing tests that can be repeated over different input values without duplication. Uses TEST_P and INSTANTIATE_TEST_SUITE_P. \\n\\n- Extending Google Test - Explains how to customize Google Test\\u0027s output by implementing event listeners that receive notifications about test progress. \\n\\n- Advanced Running Options - Covers various flags and environment variables to control test execution, like selecting tests to run via --gtest_filter, repeating tests with --gtest_repeat, shuffling tests with --gtest_shuffle, etc.\\n\\n- Sharing Resources Between Tests - Explains how to define resources shared across an entire test suite using SetUpTestSuite/TearDownTestSuite static methods.\\n\\nSo in summary, it documents many advanced patterns for writing robust and maintainable tests with Google Test beyond just the basic assertions.\&quot;,\&quot;/googletest/docs/community_created_documentation.md\&quot;:\&quot;This file is documenting community-created documentation for Google Test (googletest).\\n\\nSome key things about this file:\\n\\n- It is listing links to documentation that was created by the Google Test community, not officially by the Google Test developers.\\n\\n- It is intended to collect and centralize links to useful third-party documentation about Google Test. \\n\\n- By including it in the googletest/docs directory, it makes these external documentation resources more discoverable to Google Test users.\\n\\n- Currently it only lists one link, to a document called \\\&quot;Googlemock Insights\\\&quot; which provides additional insights about Google Mock (a companion library to Google Test for mock objects).\\n\\n- In the future it could be expanded to include links to more third-party Google Test documentation resources as they are created and shared publicly. \\n\\n- The purpose is to complement the official Google Test documentation by surfacing additional explanatory materials created independently by users and experts in the community.\\n\\nSo in summary, the key function of this file is to collect and provide access to useful Google Test documentation created externally by the open source community, in order to help users learn about and utilize Google Test more effectively.\&quot;,\&quot;/googletest/googlemock/include/gmock/internal/custom/gmock-generated-actions.h\&quot;:\&quot;This file is a private header file included by gmock/gmock.h. It contains generated action classes used internally by Google Mock.\\n\\nSome key things about this file:\\n\\n- It has IWYU pragmas to mark it as private and befriend gmock namespaces, indicating it is an internal implementation detail.\\n\\n- It has include guards to prevent multiple inclusions. \\n\\n- It likely declares classes like Return, Throw, etc. that are used to define mock behavior but need to be generated to work properly behind the scenes.\\n\\n- Common functions it likely contains are constructors, assignment operators, invocation operators to define the action behavior when called. \\n\\n- It helps implement the public action APIs declared in gmock.h but keeps the implementation separate and generated for internal use.\\n\\nSo in summary, this is an internal/private header that contains generated code to implement the action functionality exposed through the public gmock API, but keeps the implementation separate for internal use by Google Mock. The key functions are likely constructors and invocation operators of the generated action classes.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-more-matchers.h\&quot;:\&quot;This file defines some additional matchers for Google Mock that depend on the matchers defined in gmock-matchers.h.\\n\\nKey things it does:\\n\\n- Defines the IsEmpty polymorphic matcher that can match empty containers or C-style strings.\\n\\n- Defines the IsTrue and IsFalse matchers that can match values that evaluate to true/false in a boolean context, useful for types that define explicit bool conversion operators. \\n\\n- Includes necessary headers like gmock.h and gmock-matchers.h\\n\\n- Handles MSVC warnings\\n\\n- Defines the matcher implementations as internal classes/functions\\n\\n- Exports the matchers for external usage via MakePolymorphicMatcher\\n\\nSo in summary, it provides some additional commonly useful matchers on top of the core matcher implementation, in a way that is portable and hides implementation details. The key functions are IsEmpty(), IsTrue, and IsFalse which expose the defined matchers.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-port-arch.h\&quot;:\&quot;This file is part of Google Test, Google\\u0027s C++ testing framework.\\n\\nIt defines macros to detect the platform/OS that Google Test is being compiled on. Specifically:\\n\\n- It defines macros like GTEST_OS_WINDOWS, GTEST_OS_LINUX, GTEST_OS_MAC etc based on predefined macros for each platform.\\n\\n- It further distinguishes between different versions of Windows like desktop, mobile, RT etc. \\n\\n- It also detects other less common platforms like Cygwin, MinGW, OSX, iOS, Linux variants like Android etc.\\n\\n- Newer platforms like Fuchsia, ESP32 are also detected.\\n\\nThe key purpose is to provide abstraction for platform detection so that Google Test code can conditionally compile features based on the target platform.\\n\\nThis file does not contain any functions. It only defines macros for platform detection. The macros defined here are then used in other Google Test code/headers to conditionally compile platform-specific code.\\n\\nSo in summary:\\n\\n- Defines macros for platform/OS detection \\n- Provides abstraction for platform detection\\n- Used by other Google Test code for conditional compilation\\n- Contains no functions, only macro definitions\&quot;,\&quot;/googletest/googletest/test/gtest_json_test_utils.py\&quot;:\&quot;This file contains utilities for normalizing Google Test\\u0027s JSON output from test runs.\\n\\nThe key things it does:\\n\\n- normalize() function: Takes a JSON output object and recursively normalizes it by calling _normalize().\\n\\n- _normalize() function: Does the actual normalization of individual keys/values:\\n  - Replaces timestamps and times with generic placeholders\\n  - Removes file paths from failure messages, leaving just the file name\\n  - Truncates stack traces to just say \\\&quot;Stack trace: *\\\&quot;\\n\\n- Handles dictionaries and lists recursively so the entire object graph is normalized\\n\\n- The goal is to remove any transient/random data like timestamps, paths, specific stack traces etc. so normalized output can be compared across different test runs.\\n\\nSo in summary, it provides a normalize() function that takes the raw JSON output and returns a cleaned/normalized version that is stable and can be used for comparisons to validate tests are passing consistently.\\n\\nThe main functions are:\\n\\n- normalize() - Top level normalization function \\n- _normalize() - Recursive normalization of individual values\&quot;,\&quot;/googletest/googletest/docs/README.md\&quot;:\&quot;This file is informing users that the documentation for GoogleTest has been moved to a new location.\\n\\nSome key points:\\n\\n- GoogleTest is a testing framework for C++. This file is located in the googletest/googletest repository which contains the source code for GoogleTest.\\n\\n- The documentation used to be located in the /googletest/googletest/docs directory of the repository. \\n\\n- The documentation has now been moved to the top-level /docs directory of the repository. \\n\\n- This file is left in the old docs location to notify users that the documentation location has changed and where it can now be found (at /docs).\\n\\n- It does not contain any code or functions - it is simply an informational text file to redirect users to the new documentation location as the structure of the repository has changed.\\n\\nSo in summary, this file:\\n\\n- Notifies users that the GoogleTest documentation location has changed  \\n- Provides the new location for the documentation at /docs\\n- Does not contain any code - it is just an informational text redirect file\&quot;,\&quot;/googletest/googletest/test/gtest_xml_outfiles_test.py\&quot;:\&quot;This file contains unit tests for Google Test\\u0027s XML output functionality.\\n\\nKey things it does:\\n\\n- Sets up a temporary output directory for the XML test files.\\n\\n- Defines expected XML output strings for two sample tests. \\n\\n- Runs the sample tests, passing the output directory to Google Test.\\n\\n- Parses and validates the actual XML output files against the expected strings.\\n\\nKey functions:\\n\\n- setUp() - Sets up the temporary output directory\\n\\n- tearDown() - Cleans up files/directory after tests\\n\\n- DeleteFilesAndDir() - Helper to clean up files\\n\\n- testOutfile1()/testOutfile2() - Individual test functions\\n\\n- _TestOutFile() - Common logic to run a test and validate XML output\\n\\n- AssertEquivalentNodes() - Compares XML nodes for equivalence\\n\\n- NormalizeXml() - Normalizes XML for comparison \\n\\nSo in summary, it sets up test harnesses, runs them capturing XML output, and validates the output matches what is expected to test Google Test\\u0027s XML reporting functionality.\&quot;,\&quot;/googletest/googletest/test/googletest-output-test.py\&quot;:\&quot;This file tests the text output of the Google Test framework.\\n\\nKey functions:\\n\\n- GetShellCommandOutput() - Runs a shell command and returns its output.\\n\\n- GetCommandOutput() - Runs a command and returns the output with file locations stripped. \\n\\n- GetOutputOfAllCommands() - Runs several representative test commands and concatenates the output.\\n\\n- NormalizeOutput() - Normalizes the output by removing file locations, stack traces, times etc. \\n\\n- RemoveUnsupportedTests() - Removes any tests not supported on the current platform from the output.\\n\\n- testOutput() - Main test function that compares the actual output to a golden output file.\\n\\n- CAN_GENERATE_GOLDEN_FILE - Checks if the environment supports generating a new golden file.\\n\\n- main() - Runs the tests or generates a new golden file if requested via command line flag.\\n\\nSo in summary, it runs Google Test programs, normalizes the output, compares it to a golden output file, and also has the ability to generate a new golden file if needed. The output is tested across different platforms and test configurations.\&quot;,\&quot;/googletest/googletest/test/googletest-list-tests-unittest.py\&quot;:\&quot;This file contains a unit test for Google Test\\u0027s --gtest_list_tests flag.\\n\\nThe key things it does:\\n\\n- Defines constants like the path to the test executable and expected output regexes.\\n\\n- Defines a Run() function that runs the test executable and returns output. \\n\\n- Defines a GTestListTestsUnitTest test class that inherits from Google Test\\u0027s TestCase.\\n\\n- The test class contains unit tests:\\n\\n  - testDefaultBehavior() runs without flags and expects no output\\n\\n  - testFlag() runs with --gtest_list_tests on/off and checks output\\n\\n  - testOverrideNonFilterFlags() checks flags are overridden\\n\\n  - testWithFilterFlags() checks filters work with listing\\n\\n- Each test uses RunAndVerify() to:\\n\\n  - Run the executable with given flags\\n\\n  - Verify output matches expected regex\\n\\nSo in summary, it:\\n\\n- Runs a Google Test program that defines tests\\n- Passes various --gtest_list_tests and filter flags to it\\n- Verifies the listed tests match what\\u0027s expected\\n\\nTesting the functionality of the --gtest_list_tests flag.\&quot;,\&quot;/googletest/googlemock/include/gmock/internal/gmock-pp.h\&quot;:\&quot;This file defines macros for C/C++ preprocessor metaprogramming used internally by Google Mock.\\n\\nKey functions:\\n\\n- GMOCK_PP_CAT - Concatenates two tokens.\\n- GMOCK_PP_STRINGIZE - Stringifies a token.  \\n- GMOCK_PP_NARG - Counts number of arguments.\\n- GMOCK_PP_HEAD/GMOCK_PP_TAIL - Gets first/remaining arguments.\\n- GMOCK_PP_FOR_EACH - Applies a macro to each element of a tuple. \\n- GMOCK_PP_REPEAT - Repeats a macro N times.\\n- GMOCK_PP_IF - Conditional expansion based on argument.\\n- GMOCK_PP_IS_EMPTY - Checks if arguments are empty.\\n\\nIt implements common preprocessor metaprogramming patterns like recursion, iteration, conditionals etc. using only the basic C preprocessor. These macros are used internally by Google Mock for things like defining mock classes and methods based on function signatures at compile-time without using templates.\\n\\nSo in summary, it provides a set of preprocessor macros that implement metaprogramming capabilities needed for Google Mock\\u0027s internal implementation using only the standard C preprocessor facilities.\&quot;,\&quot;/googletest/CONTRIBUTING.md\&quot;:\&quot;This file contains guidelines for contributing code to the Google Test and Google Mock projects.\\n\\nThe key things it covers include:\\n\\n- Contributor License Agreements - Contributors need to sign a CLA before their code can be accepted.\\n\\n- Submitting a pull request - The process for submitting a PR, including opening an issue first, getting sign-off from team members, signing a CLA, developing and testing the code changes, ensuring code style is followed, etc. \\n\\n- Community guidelines - Encourages being friendly and respectful on discussion forums. \\n\\n- Coding style - All code must follow Google\\u0027s C++ style guide. \\n\\n- Requirements for contributors - Tools like CMake, Python that are needed to build and test Google Test/Mock from source.\\n\\n- Developing Google Test/Mock - How to compile and run their own test suites to ensure changes don\\u0027t break existing functionality. This involves using CMake and running `make test`.\\n\\nSo in summary, it provides guidelines for the legal process, code submission workflow, community expectations, coding style rules, development environment setup, and testing procedures for contributing code changes to the Google Test and Google Mock projects on GitHub.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/custom/gtest-port.h\&quot;:\&quot;This file is part of Google Test, Google\\u0027s C++ test framework. It provides customization points for porting Google Test to different platforms and environments.\\n\\nSome key things about this file:\\n\\n- It contains the copyright and license information for Google Test.\\n\\n- It provides an injection point for custom user configurations, as indicated by the comment \\\&quot;// ** Custom implementation starts here **\\\&quot;. Users can define custom macros, types, etc. here for their specific platform/environment. \\n\\n- It guards against multiple inclusions using header guards (the #ifndef/#define/#endif block).\\n\\n- It does not contain any function definitions. Its purpose is to allow customization at the header/macro level, not provide any functions itself.\\n\\nSo in summary, this file:\\n\\n- Provides licensing information \\n- Allows customization/porting of Google Test headers\\n- Guards against multiple inclusions\\n- Does not contain any functions itself, only customization points via macros/types\\n\\nIt serves as an extension/customization point for the core Google Test headers to support different platforms. Users can define platform-specific code in this file.\&quot;,\&quot;/googletest/googletest/test/googletest-uninitialized-test.py\&quot;:\&quot;This Python file tests that Google Test (gtest) properly warns the user if it is not initialized correctly.\\n\\nKey things it does:\\n\\n- Defines a COMMAND variable with the path to a test executable that is expected to not initialize gtest properly.\\n\\n- Defines some assertion functions like Assert and AssertEq to validate test results.\\n\\n- Defines a TestExitCodeAndOutput function that runs the COMMAND, checks its exit code is 1, and verifies warning messages are printed. \\n\\n- Defines a GTestUninitializedTest test case class that inherits from the gtest_test_utils test case class. \\n\\n- The testExitCodeAndOutput test method calls TestExitCodeAndOutput to actually run the test.\\n\\n- The main function calls gtest_test_utils.Main() to run the tests via the gtest test framework.\\n\\nSo in summary, it:\\n\\n1. Sets up a test executable expected to fail initialization\\n2. Defines assertion helpers \\n3. Defines a test that runs the executable and validates results\\n4. Implements the test as a Google Test\\n5. Runs the tests\\n\\nKey functions are TestExitCodeAndOutput which runs the test and Assert/AssertEq for assertions.\&quot;,\&quot;/Sources/Search.cpp\&quot;:\&quot;This file contains functions for converting a search tree back into the steps (states) to reach the goal state.\\n\\nThe key functions are:\\n\\n- treeToSteps(std::unordered_map\\u003cunsigned int, unsigned int\\u003e \\u0026parentMap)\\n\\n  This takes a map of states to their parent states and converts it into a vector of state grids representing the steps to reach the goal. It traces the parent links back from the goal state.\\n\\n- treeToSteps(std::unordered_map\\u003cunsigned int, std::pair\\u003cunsigned int, size_t\\u003e\\u003e \\u0026parentMap)\\n\\n  This is an overloaded version that takes a map of states to a parent-depth pair instead of just the parent. It works the same way but traces the parent links.\\n\\n- stateToGrid(unsigned int key)\\n\\n  This is used within the treeToSteps functions to convert a state ID number into the 2D grid representation of that state.\\n\\nSo in summary, it provides functions to convert a search tree stored as parent links back into the sequential steps/states that were explored to reach the goal state. This would be useful for visualization or debugging of search algorithms.\&quot;,\&quot;/googletest/googletest/src/gtest-internal-inl.h\&quot;:\&quot;This file (gtest-internal-inl.h) contains the internal implementation details of Google Test. Some key things it does:\\n\\n- Defines classes and functions that are used internally by Google Test but not exposed to users, like UnitTestImpl, TestResultAccessor, etc.\\n\\n- Implements the core functionality of running tests, collecting and reporting results internally. This includes functions like:\\n\\n  - RunAllTests() - Runs all tests \\n  - GetTestSuite() - Gets a TestSuite \\n  - AddTestInfo() - Adds a TestInfo\\n  - FilterTests() - Filters tests based on flags\\n  - RecordProperty() - Records a test property\\n\\n- Manages test suites, test cases and test results internally using classes like UnitTestImpl, TestSuite, TestResult etc. \\n\\n- Handles test filtering, shuffling, registration of parameterized tests.\\n\\n- Provides utilities for parsing command line flags, getting stack traces, formatting times etc. \\n\\n- Implements test event listeners for XML output, streaming results etc. \\n\\n- Contains internal support code for death tests, parameterized tests etc.\\n\\nSo in summary, it contains all the internal implementation details and utilities required to run Google Test, while exposing a simpler interface to users via gtest.h. The key functions manage the overall test running and result collection process.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/custom/README.md\&quot;:\&quot;This file documents customization points for Google Test (googletest). It allows users to customize certain aspects of googletest\\u0027s behavior by defining macros in their code.\\n\\nThe key things it allows customizing:\\n\\n- Header gtest.h:\\n  - OsStackTraceGetter implementation\\n  - Override for TempDir() function\\n\\n- Header gtest-port.h: \\n  - Logging macros and functions\\n  - Threading support macros\\n  - Underlying library feature macros\\n  - Exporting API symbols macro\\n\\n- Header gtest-printers.h:\\n  - Define custom printers for printing test values\\n\\nSo in summary, it provides injection points where users can customize things like logging, threading, underlying system support, and value printing in googletest to better fit their environment or needs. The customizations are done by defining specific macros in the user\\u0027s code. This allows googletest to remain customizable without needing to modify its source code directly.\&quot;,\&quot;/googletest/googletest/README.md\&quot;:\&quot;This file contains documentation on how to build and use Google Test (GTest), Google\\u0027s C++ test framework.\\n\\nSome key points:\\n\\n- It provides generic build instructions for GTest using CMake, the most common build system. It shows how to build GTest as a standalone project or incorporate it into an existing CMake project.\\n\\n- It lists some common macros that can be used to tweak GTest\\u0027s behavior, like enabling/disabling threading, building as a shared library, avoiding macro name clashes, etc. \\n\\n- The main functions/macros provided by GTest include:\\n  - TEST - Defines a test case\\n  - TEST_F - Defines a test case with a fixture\\n  - ASSERT_EQ, ASSERT_NE, etc - Assertion macros \\n  - EXPECT_TRUE, EXPECT_FALSE - Expectation macros\\n  - FAIL, SUCCEED - Fail/succeed a test\\n  - GTEST_IS_THREADSAFE - Check if GTest is thread-safe\\n\\n- GTest allows writing test fixtures to set up shared resources for multiple tests. It provides functionality for running tests across multiple threads.\\n\\n- Tests can be grouped into test suites defined with TEST and TEST_F. GTest handles setting up/tearing down fixtures and reporting results.\\n\\nSo in summary, this file documents how to integrate and configure GTest, Google\\u0027s unit testing framework for C++. It provides generic build instructions and explains the main macros/functions for writing and running unit tests.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-spi.h\&quot;:\&quot;This file contains utilities for testing Google Test itself and code that uses Google Test.\\n\\nKey things it provides:\\n\\n- ScopedFakeTestPartResultReporter - A class that can intercept and record Google Test failure reporting. This allows mocking out the failure reporting so tests can verify failures are generated as expected.\\n\\n- EXPECT_FATAL_FAILURE/EXPECT_FATAL_FAILURE_ON_ALL_THREADS - Macros that verify a statement causes exactly one fatal Google Test failure with a given substring.\\n\\n- EXPECT_NONFATAL_FAILURE/EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS - Same but for non-fatal failures. \\n\\n- SingleFailureChecker - A helper class used by the above macros to verify only one failure of a given type is recorded.\\n\\nSo in summary, it provides utilities for:\\n\\n- Mocking out Google Test\\u0027s failure reporting\\n- Asserting statements cause expected fatal/non-fatal failures\\n- Helpers for verifying the expected number and type of failures\\n\\nThis allows testing Google Test itself and code that uses assertions/expectations.\&quot;,\&quot;/googletest/docs/quickstart-cmake.md\&quot;:\&quot;This file provides a quickstart guide for building a project with Google Test using CMake.\\n\\nThe key things it does:\\n\\n- Sets up prerequisites like having CMake and a C++ compiler.\\n\\n- Explains how to create a CMake project by creating a CMakeLists.txt file. \\n\\n- Shows how to declare Google Test as a dependency using FetchContent and download it from GitHub.\\n\\n- Demonstrates creating a simple test file (hello_test.cc) with some basic assertions.\\n\\n- Configures the CMake build by enabling testing, adding the test executable, and linking it to Google Test. \\n\\n- Uses the GoogleTest CMake module to discover and run the tests.\\n\\n- Provides commands to build and run the tests with CMake and ctest.\\n\\nKey functions/concepts it covers:\\n\\n- Declaring dependencies with FetchContent in CMake\\n- Creating a basic test file with Google Test assertions \\n- Configuring the build with CMake targets, libraries and test discovery\\n- Building and running tests with CMake and ctest\\n- Linking tests to the Google Test libraries\\n- Downloading external dependencies like Google Test\\n\\nSo in summary, it provides a full quickstart example of setting up a CMake project that uses Google Test for unit testing.\&quot;,\&quot;/Sources/main.cpp\&quot;:\&quot;This C++ file is the main entry point for a simple SFML graphics program.\\n\\nKey things it does:\\n\\n- Includes necessary header files for SFML graphics, audio, and other libraries\\n\\n- Defines main() as the entry point \\n\\n- Creates an SFML RenderWindow for displaying graphics\\n\\n- Loads a texture and sprite from files to display an image\\n\\n- Loads a font and creates a text object to display text\\n\\n- Has a main game loop that:\\n\\n  - Polls for events like window close\\n\\n  - Clears the screen\\n\\n  - Draws the sprite and text \\n\\n  - Updates the window display\\n\\nKey functions:\\n\\n- main() - Program entry point\\n\\n- sf::RenderWindow constructor - Creates the main window \\n\\n- texture.loadFromFile() - Loads a texture from file \\n\\n- font.loadFromFile() - Loads a font from file\\n\\n- window.pollEvent() - Polls for window events \\n\\n- window.clear() - Clears the window \\n\\n- window.draw() - Draws sprites and text \\n\\n- window.display() - Updates the window display\\n\\nSo in summary, it sets up a basic SFML graphics app with a window, loads assets, has a game loop to draw and update the display.\&quot;,\&quot;/googletest/googletest/test/gtest_test_utils.py\&quot;:\&quot;This file contains utilities for running and testing Google Test (gtest) unit tests from Python.\\n\\nKey functions:\\n\\n- _ParseAndStripGTestFlags(): Parses command line flags like --build_dir and strips them from sys.argv. Stores flag values in _flag_map.\\n\\n- GetFlag(): Returns the value of a gtest flag like \\u0027build_dir\\u0027.\\n\\n- GetSourceDir(), GetBuildDir(): Convenience functions to get source/build dirs from flags. \\n\\n- GetTestExecutablePath(): Finds the path to a test binary, validating it exists.\\n\\n- GetExitStatus(): Extracts the exit status from a subprocess return code.\\n\\n- Subprocess(): Class to run a command in a subprocess, capturing output.\\n\\n- Main(): The main entry point, which strips flags, runs unittest.main() and cleans up environment variables.\\n\\nSo in summary, it provides utilities for parsing gtest flags, running tests via subprocess, and integrating gtest tests into the Python unittest framework. This allows writing and running gtest tests directly from Python.\&quot;,\&quot;/googletest/googlemock/test/gmock-matchers_test.h\&quot;:\&quot;This file tests Google Mock\\u0027s argument matchers.\\n\\nSome key things it does:\\n\\n- Defines a GTestGreaterThanMatcher class that implements a \\u003e matcher and can explain the match result. This is used to test ExplainMatchResultTo().\\n\\n- Defines a ContainerHelper class with a mock method that takes a container. This is used to test matchers in a mock method context. \\n\\n- Defines a GTestMatcherTestP test fixture parameterized on whether it uses the GTest matcher implementation or Google Mock\\u0027s MatcherInterface. This allows testing both implementations.\\n\\n- Provides Describe(), DescribeNegation(), and Explain() helper functions to get the description and explanation strings from matchers.\\n\\n- Instantiates the GTestMatcherTestP test fixture for both the MatcherInterface and GtestMatcher cases.\\n\\n- Includes headers for all the containers, matchers and other types needed from Google Test and Google Mock.\\n\\nSo in summary, it sets up test infrastructure and helper functions to comprehensively test Google Mock\\u0027s argument matchers and explanation functionality.\&quot;,\&quot;/Sources/State.cpp\&quot;:\&quot;This file defines functions for working with the state representation of a 3x3 sliding puzzle game.\\n\\nKey functions:\\n\\n- getNeighbors(state): Given a state integer, returns a vector of integer neighbors by moving the empty tile. It uses a pre-defined data structure to determine valid moves.\\n\\n- gridToState(grid): Converts a vector representing a 3x3 grid into a single integer state representation. \\n\\n- stateToGrid(state): Converts a state integer back into a vector representing the 3x3 grid.\\n\\nSo in summary, it provides functions to:\\n\\n1. Get valid neighbor states by moving the empty tile\\n2. Convert between the grid and state representations of a puzzle configuration\\n\\nThis allows the puzzle state to be efficiently represented as a single integer, while still supporting operations like finding neighboring states and converting to/from the human-readable grid format.\&quot;,\&quot;/googletest/googlemock/docs/README.md\&quot;:\&quot;This file is informing users that the documentation for GoogleTest and GoogleMock has been moved to a new location.\\n\\nSome key points:\\n\\n- GoogleTest is a testing framework for C++ developed by Google. GoogleMock is a mocking framework that can be used with GoogleTest.\\n\\n- This file is located in the googletest/googlemock/docs directory, which previously contained documentation. \\n\\n- It is announcing that the documentation has been moved to the top-level docs directory at googletest/docs. \\n\\n- The purpose is to redirect users finding documentation in the old location to the new, updated documentation site.\\n\\n- It does not contain any code or functions - it is simply a README file informing users of the change in documentation location.\\n\\n- No key functions are listed, as it is just an informational text file rather than code. The main \\\&quot;function\\\&quot; is to redirect users to the new docs directory for GoogleTest/GoogleMock documentation.\\n\\nSo in summary, this file exists to notify users that the GoogleTest/GoogleMock documentation has been moved, and directs them to the updated location without any code or functions of its own.\&quot;,\&quot;/googletest/googletest/test/googletest-param-test-test.h\&quot;:\&quot;This file contains test code for testing Google Test\\u0027s parameterized test functionality.\\n\\nKey things:\\n\\n- It defines two test fixture classes - ExternalInstantiationTest and InstantiationInMultipleTranslationUnitsTest - that inherit from TestWithParam\\u003cint\\u003e. This allows them to be used as parameterized tests.\\n\\n- ExternalInstantiationTest is intended to test defining and instantiating a test in separate translation units, to test that the parameterization works across TUs. \\n\\n- InstantiationInMultipleTranslationUnitsTest is intended to test instantiating the same test in multiple TUs, to test that the parameterization works when instantiated in different places.\\n\\n- No test functions are defined here, just the fixture class declarations. The actual test code would be in a .cpp file that includes this header and defines tests using these fixtures.\\n\\n- The goal is to test that Google Test\\u0027s parameterized testing functionality works as expected when tests are defined/instantiated across multiple files.\\n\\nSo in summary, it provides test fixture infrastructure to test Google Test\\u0027s parameterized testing in situations involving separate definition/instantiation or multiple instantiations. The actual test logic would be elsewhere.\&quot;,\&quot;/googletest/googlemock/test/gmock_leak_test.py\&quot;:\&quot;This file tests Google Mock\\u0027s ability to detect leaked mock objects.\\n\\nKey things it does:\\n\\n- Defines paths to test programs that are expected to leak mocks in different ways (with EXPECT_CALL, ON_CALL, multiple leaks)\\n\\n- Sets up the environment by unsetting the premature exit file path variable, since the tests are expected to cause premature exits\\n\\n- Defines a GMockLeakTest test case class\\n\\n- Implements tests that:\\n\\n  - Run the test programs and expect a non-zero exit code by default to indicate leaked mocks detected\\n\\n  - Run with --gmock_catch_leaked_mocks\\u003d0 and expect exit code 0 to show leaks are not detected\\n\\n  - Run with --gmock_catch_leaked_mocks and --gmock_catch_leaked_mocks\\u003d1 and expect non-zero exit code to show leaks are detected\\n\\n  - Specifically tests the multiple leaked mocks case\\n\\n- The key functions are:\\n\\n  - Subprocess() to run the test programs\\n\\n  - SetEnvVar() to modify the environment\\n\\n  - TestCase methods like testCatchesLeakedMockByDefault() to implement the individual tests\\n\\nSo in summary, it tests Google Mock\\u0027s ability to detect and report leaked mock objects by running test programs that are expected to leak mocks and validating the exit codes.\&quot;,\&quot;/googletest/googletest/test/googletest-failfast-unittest.py\&quot;:\&quot;This file contains a unit test for Google Test\\u0027s fail fast functionality.\\n\\nKey things it does:\\n\\n- Defines constants like command names, environment variable names, etc.\\n\\n- Defines utility functions:\\n  - SetEnvVar() to set/unset environment variables\\n  - RunAndReturnOutput() to run the test program and return output\\n\\n- GTestFailFastUnitTest class:\\n  - Inherits from gtest_test_utils.TestCase\\n  - Contains test methods that:\\n    - Run tests with different fail fast configurations\\n    - Assert that the output and XML match expected counts based on pass/fail/skip\\n\\n- Main test functions:\\n  - testGoogletestFlag()\\n  - testGoogletestEnvVar() \\n  - testBazelEnvVar()\\n  - testFlag_* methods test different test suites\\n  - assertFailFastBehavior/assertNotFailFastBehavior assert expected output\\n\\n- Tests precedence of flag over env var\\n- Tests different disabled test configurations\\n- Checks event listener callbacks are emitted correctly\\n\\nSo in summary, it sets up a test harness to exercise the Google Test fail fast functionality under different conditions and asserts the outputs match expectations.\&quot;,\&quot;/googletest/docs/faq.md\&quot;:\&quot;This file contains the Frequently Asked Questions (FAQ) for GoogleTest, Google\\u0027s C++ testing framework.\\n\\nSome key things it does:\\n\\n- Explains common questions and issues users may have when using GoogleTest. This helps users troubleshoot problems.\\n\\n- Provides guidance on best practices for writing tests with GoogleTest, like why test and fixture names shouldn\\u0027t contain underscores.\\n\\n- Clarifies the semantics and limitations of certain GoogleTest features, like how death tests work.\\n\\n- Suggests workarounds for compiler errors or other issues that may come up, like suppressing memory leak messages on Windows. \\n\\nKey sections/functions:\\n\\n- Explains the rationale behind naming conventions for tests and fixtures.\\n\\n- Clarifies the differences between typed tests and parameterized tests and when to use each.\\n\\n- Details what statements can be used with death test macros like ASSERT_DEATH.\\n\\n- Covers derived test fixtures and how to share fixture logic across test suites. \\n\\n- Addresses common compiler errors and how to fix them, like undefined references to static members.\\n\\n- Answers questions about test organization and best practices, like using fixtures over globals.\\n\\nSo in summary, this file serves as a helpful reference for users of the GoogleTest framework, explaining features, conventions, common problems and their solutions. It aims to help users write better, more robust tests with GoogleTest.\&quot;,\&quot;/Sources/AStarEuc.cpp\&quot;:\&quot;This file implements an A* search algorithm for solving the 8-puzzle problem using a Euclidean heuristic.\\n\\nKey functions:\\n\\n- AStarEuc constructor - Initializes the start state from the input grid.\\n\\n- aStar - Performs the main A* search loop. Maintains an open frontier priority queue and parent map. Expands nodes and updates frontier until goal is found.\\n\\n- search - Runs the aStar function and collects metrics like path cost, nodes expanded, runtime. Throws error if no solution found.\\n\\n- heuristic - Implements the Euclidean distance heuristic to estimate cost to goal for a given state. \\n\\n- euclideanDistance - Helper function to calculate Euclidean distance between two positions.\\n\\n- getNeighbors - Not defined here but presumably returns valid neighbor states of an input state.\\n\\n- treeToSteps - Reconstructs the solution path by backtracking through the parent map.\\n\\nSo in summary, it implements the core A* search algorithm using a priority queue to efficiently explore the state space, with a Euclidean heuristic to guide the search towards the goal for the 8-puzzle problem.\&quot;,\&quot;/googletest/googlemock/include/gmock/internal/custom/gmock-matchers.h\&quot;:\&quot;This file is an injection point for custom user-defined matchers in Google Mock. Some key points:\\n\\n- It includes the copyright and license header from Google.\\n\\n- The comment indicates this is an injection point for custom matchers. \\n\\n- There are no actual functions defined here. It is just a header file inclusion guard to allow custom matcher code to be included here without conflicts.\\n\\n- The IWYU pragmas tell the compiler this file is private to gmock and gmock files are its friends. \\n\\nSo in summary:\\n\\n- It provides a header guard \\n- Indicates it is for custom matcher code\\n- Includes necessary pragmas for compiler\\n- But does not define any functions itself\\n\\nThe purpose is to allow users to define their own matcher implementations and include them in this file so they are accessible within Google Mock without conflicts. But it does not contain any matcher code or functions itself.\&quot;,\&quot;/googletest/googletest/test/gtest_xml_test_utils.py\&quot;:\&quot;This file contains utilities for testing Google Test\\u0027s XML output functionality.\\n\\nKey things it does:\\n\\n- Defines a GTestXMLTestCase base class for tests of the XML output.\\n\\n- AssertEquivalentNodes function to assert two DOM nodes are equivalent, ignoring things like order of children.\\n\\n- _GetChildren function to extract child nodes of an element as a dictionary keyed by IDs.\\n\\n- NormalizeXml function to normalize the XML output to remove transient/platform dependent info like timestamps, type parameters, file paths, stack traces etc. \\n\\nKey functions:\\n\\n- AssertEquivalentNodes - Main assertion to compare expected and actual XML nodes\\n- _GetChildren - Helper to extract child nodes as a dictionary \\n- NormalizeXml - Function to normalize the XML output for comparisons\\n\\nSo in summary, it provides utilities like assertions and normalization functions to make testing and comparing the XML output generated by Google Test easier. The base test case class and functions like AssertEquivalentNodes and NormalizeXml are the main things that enable testing the XML output.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest.h\&quot;:\&quot;This file defines the main interface for Google Test, Google\\u0027s C++ testing framework.\\n\\nSome key things it does:\\n\\n- Defines macros for writing tests like TEST, TEST_F, EXPECT_EQ, ASSERT_TRUE, etc. These allow writing tests in a simple and readable way.\\n\\n- Defines the Test, TestSuite, TestInfo classes which represent the core testing entities - tests, test suites, test metadata. \\n\\n- Defines the UnitTest class which represents the entire test program and manages running all tests.\\n\\n- Defines macros like SCOPED_TRACE to add context to failure messages.\\n\\n- Defines type traits and helper classes like WithParamInterface used for parameterized tests.\\n\\n- Defines functions like RUN_ALL_TESTS() to run all tests and return the result code.\\n\\n- Defines functions like TempDir(), SrcDir() to get paths for temporary files.\\n\\n- Defines the TestEventListener interface for extending test execution behavior.\\n\\n- Defines advanced APIs like RegisterTest() for registering tests programmatically.\\n\\nSo in summary, it provides the core abstractions, macros and functions needed for writing, running and extending Google Test based test programs in C++. The macros allow writing tests in a very readable way, while the classes power all the test execution and result reporting functionality.\&quot;,\&quot;/googletest/README.md\&quot;:\&quot;This file is the README.md file for the GoogleTest C++ testing framework project.\\n\\nSome key things it does:\\n\\n- Provides announcements and updates about GoogleTest, including new releases, documentation changes, etc. \\n\\n- Gives an overview and introduction to GoogleTest - what it is, how to get started, etc.\\n\\n- Lists the main features that GoogleTest provides for unit testing C++ code.\\n\\n- Specifies the supported platforms that GoogleTest works on. \\n\\n- Mentions some notable projects that use GoogleTest for their testing.\\n\\n- Lists some related open source projects that integrate with or extend GoogleTest functionality. \\n\\n- Provides instructions for contributing code changes back to the GoogleTest project.\\n\\nSo in summary, it serves as the main documentation file for the project, providing information about:\\n\\n- What GoogleTest is \\n- How to get started with it\\n- Its key testing features\\n- Supported platforms\\n- Who else uses it\\n- Related projects\\n- Contribution guidelines\\n\\nIt acts as a central starting point and reference for anyone interested in using or contributing to the GoogleTest testing framework.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-spec-builders.h\&quot;:\&quot;This file defines the core functionality for specifying expectations and default actions on mock functions in Google Mock.\\n\\nSome key things it does:\\n\\n- Defines the ON_CALL and EXPECT_CALL macros for specifying default actions and expectations respectively.\\n\\n- Defines the MockSpec class template, which is used by ON_CALL and EXPECT_CALL to specify the mock function being called.\\n\\n- Defines the FunctionMocker class template, which implements a single mock function. This holds the expectations and default actions.\\n\\n- Defines the Expectation and ExpectationSet classes, which represent expectations and sets of expectations.\\n\\n- Defines the TypedExpectation class template, which represents a single expectation on a mock function. This stores the matchers, actions, cardinality etc. \\n\\n- Defines the OnCallSpec class template, which represents a default action specified with ON_CALL.\\n\\n- Provides utilities like Mock, which manages mock objects, and InSequence for specifying order of expectations.\\n\\nSome key functions:\\n\\n- FunctionMocker::Invoke() - Invokes a mock function call. Finds and executes matching expectation.\\n\\n- TypedExpectation::Matches() - Checks if expectation matchers match arguments. \\n\\n- ExpectationBase::GetActionForArguments() - Gets action for call, increments count.\\n\\n- OnCallSpec::Matches() - Checks if default action matchers match arguments.\\n\\nSo in summary, it implements the core infrastructure for defining and handling expectations and default actions on mock functions.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/custom/gtest.h\&quot;:\&quot;This file is an injection point for custom user configurations for Google Test, Google\\u0027s C++ testing framework.\\n\\nSome key things about this file:\\n\\n- It has a standard Google copyright and license header.\\n\\n- The comment \\\&quot;// Injection point for custom user configurations...\\\&quot; indicates this is where users can customize Google Test\\u0027s behavior.\\n\\n- It includes a header guard to prevent multiple inclusions of the file.\\n\\n- This file itself does not define any functions. It is meant to be included by users to add their own custom code/functions to modify Google Test\\u0027s behavior.\\n\\nSo in summary:\\n\\n- It provides a location for users to customize Google Test \\n- Does not define any functions itself\\n- Includes header guard to prevent multiple inclusions\\n- Main purpose is to allow injection of custom code by users to modify Google Test\\n\\nIt does not list any key functions itself, as the purpose is to allow users to define their own custom functions/code here to customize Google Test\\u0027s behavior for their needs.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-test-part.h\&quot;:\&quot;This file defines classes and functions related to test part results in Google Test.\\n\\nKey things it does:\\n\\n- Defines the TestPartResult class which represents the result of a single test part (assertion, FAIL(), etc). It stores things like the type of result, file/line, message, etc.\\n\\n- Defines enums like TestPartResult::Type for the possible outcomes (success, failure, skip).\\n\\n- Defines TestPartResultArray to store multiple TestPartResult objects. \\n\\n- Defines the TestPartResultReporterInterface for reporting test part results.\\n\\n- Defines the HasNewFatalFailureHelper class which implements the reporter interface. It\\u0027s used by ASSERT/EXPECT macros to check for new fatal failures.\\n\\nKey functions:\\n\\n- TestPartResult constructor - creates a TestPartResult object\\n- TestPartResult methods like type(), file_name(), message() to get result data\\n- operator\\u003c\\u003c to print a TestPartResult  \\n- TestPartResultArray::Append to add results\\n- TestPartResultArray::GetTestPartResult to get a result\\n- TestPartResultReporterInterface::ReportTestPartResult to report a result\\n\\nSo in summary, it defines the core classes and interfaces for representing and reporting the results of individual test parts/assertions in Google Test.\&quot;,\&quot;/googletest/googletest/samples/sample3-inl.h\&quot;:\&quot;This file defines a Queue template class that implements a queue data structure using a singly-linked list.\\n\\nThe key things it does:\\n\\n- Defines a QueueNode class that represents a node in the linked list, containing an element and a pointer to the next node.\\n\\n- Defines a Queue template class that manages the head, last, and size of the queue. \\n\\n- Implements common queue functions:\\n  - Enqueue() to add an element to the back\\n  - Dequeue() to remove an element from the front\\n  - Head() and Last() to access the first/last elements\\n  - Size() to get the number of elements\\n\\n- Map() function to apply a functor to each element and return a new queue\\n\\n- Clear() function to delete all nodes and reset the queue\\n\\n- Copy/assignment operators are deleted to prevent copying of the queue\\n\\nSo in summary, it implements a basic queue ADT using a linked list under the hood, with common queue operations like enqueue, dequeue, peeking, and mapping elements.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest_pred_impl.h\&quot;:\&quot;This file defines macros for making predicate assertions in Google Test.\\n\\nKey things it does:\\n\\n- Defines macros for unary, binary, ternary, etc. predicate assertions up to 5 arguments. Like ASSERT_PRED1, ASSERT_PRED2, etc.\\n\\n- Defines helper functions like AssertPred1Helper, AssertPred2Helper, etc. that are used to implement the predicate assertion macros. \\n\\n- The helper functions check if the predicate evaluates to true, and if not generate a failure message describing the values.\\n\\n- The macros call the helper functions, passing in the predicate, values, and a failure callback.\\n\\n- It supports both simple predicate assertions (ASSERT_PRED1) and formatted ones (ASSERT_PRED_FORMAT1) that allow custom failure messages.\\n\\n- The main macros are:\\n\\nASSERT_PRED1/2/3/4/5 - Simple predicate assertions  \\nASSERT_PRED_FORMAT1/2/3/4/5 - Formatted predicate assertions\\nEXPECT_PRED1/2/3/4/5 - Expect versions\\nEXPECT_PRED_FORMAT1/2/3/4/5 - Expect formatted versions\\n\\nSo in summary, it defines a family of macros for making predicate assertions with 1-5 arguments in Google Test.\&quot;,\&quot;/googletest/googletest/test/googletest-setuptestsuite-test.py\&quot;:\&quot;This Python file tests Google Test\\u0027s ability to handle errors in SetUpTestSuite and TearDownTestSuite.\\n\\nKey things it does:\\n\\n- Defines a COMMAND variable with the path to the Google Test executable being tested.\\n\\n- Defines a GTestSetUpTestSuiteTest test case class that inherits from the gtest_test_utils TestCase class.\\n\\n- The testSetupErrorAndTearDownError test method:\\n\\n  - Runs the COMMAND subprocess.\\n\\n  - Checks that the exit code is non-zero, indicating a failure.\\n\\n  - Checks that the output contains messages about failed test suites due to SetUpTestSuite/TearDownTestSuite errors.\\n\\n- Imports the gtest_test_utils module, which provides utilities for running Google Test executables from Python tests.\\n\\n- At the bottom, it calls gtest_test_utils.Main() to run the tests.\\n\\nKey functions:\\n\\n- Subprocess from gtest_test_utils - Runs the Google Test executable as a subprocess.\\n\\n- TestCase from gtest_test_utils - Base class for the test case that provides assertion methods. \\n\\n- Main from gtest_test_utils - Runs the tests defined in the file.\\n\\nSo in summary, it uses the gtest_test_utils utilities to run a Google Test executable that is expected to fail, and verifies the expected failure messages are produced.\&quot;,\&quot;/googletest/googletest/test/googletest-shuffle-test.py\&quot;:\&quot;This file tests the shuffling functionality of Google Test.\\n\\nKey functions:\\n\\n- CalculateTestLists(): Calculates lists of tests under different flags (all tests, active tests, filtered tests, sharded tests) for comparison later.\\n\\n- GetTestsForAllIterations(): Runs the test program and returns the list of tests for each iteration. \\n\\n- GetTestCases(): Returns a list of test cases from a list of full test names.\\n\\n- GTestShuffleUnitTest: The test case class that contains various test methods.\\n\\n- testShufflePreservesNumberOfTests: Tests that shuffling preserves number of tests.\\n\\n- testShuffleChangesTestOrder: Tests that shuffling changes test order. \\n\\n- testShuffleChangesTestCaseOrder: Tests that shuffling changes test case order.\\n\\n- testShuffleDoesNotRepeatTest: Tests that no test is repeated after shuffling. \\n\\n- testShuffleDoesNotCreateNewTest: Tests that no new tests are created by shuffling.\\n\\n- testShuffleIncludesAllTests: Tests that all original tests are included after shuffling.\\n\\n- testShuffleLeavesDeathTestsAtFront: Tests that death tests remain at the front.\\n\\n- testShuffleDoesNotInterleaveTestCases: Tests that test cases are not interleaved.\\n\\n- testShuffleRestoresOrderAfterEachIteration: Tests order is restored between iterations. \\n\\n- testShuffleGeneratesNewOrderInEachIteration: Tests new order is generated each iteration.\\n\\nSo in summary, it tests various aspects of how Google Test shuffles and partitions tests.\&quot;,\&quot;/Headers/AStarEuc.h\&quot;:\&quot;This file defines an AStarEuc class that implements the A* search algorithm using a Euclidean heuristic for the 8-puzzle problem.\\n\\nKey functions:\\n\\n- search() - The main search function that runs A* to find a solution path.\\n\\n- heuristic(state) - Calculates the heuristic value (estimated distance to goal) for a given state. Uses Euclidean distance. \\n\\n- aStar() - The core A* search logic, processes the priority queue of frontier nodes.\\n\\n- euclideanDistance(a, b) - Static function that calculates Euclidean distance between two points. Used by the heuristic.\\n\\n- Constructor AStarEuc(grid) - Initializes the start state from the given grid. \\n\\nOther important attributes:\\n\\n- start - The starting state integer \\n- GOAL - The goal state integer\\n- explored - Set to track explored states\\n- parentMap - Maps states to their parent/cost\\n- frontier - Priority queue ordered by f(n) \\u003d g(n) + h(n)\\n- path, costOfPath, nodesExpanded etc - Metrics of the search run.\\n\\nSo in summary, it implements the A* search algorithm using a Euclidean heuristic to solve the 8-puzzle problem and track search performance metrics.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h\&quot;:\&quot;This file defines internal utilities needed for implementing death tests in Google Test.\\n\\nKey things:\\n\\n- DeathTest class - Abstract base class that hides complexity of death tests. Different concrete subclasses are used depending on death test style.\\n\\n- DeathTest roles - ENUM for roles a death test can take (OVERSEE_TEST, EXECUTE_TEST) \\n\\n- DeathTestFactory interface - Factory for creating DeathTest objects, can be mocked for testing. \\n\\n- DefaultDeathTestFactory - Concrete factory implementation.\\n\\n- ExitedUnsuccessfully() - Checks if process exit status indicates unsuccessful termination.\\n\\n- MakeDeathTestMatcher() - Helper functions to convert regex/matchers to Matcher format expected by DeathTest.\\n\\n- GTEST_EXECUTE_DEATH_TEST_STATEMENT_ - Macro to execute death test statement and trap exceptions. \\n\\n- GTEST_DEATH_TEST_ - Main macro used to implement ASSERT/EXPECT death tests.\\n\\n- InternalRunDeathTestFlag - Class to represent parsed --gtest_internal_run_death_test flag.\\n\\n- ParseInternalRunDeathTestFlag() - Parse flag if set and return InternalRunDeathTestFlag.\\n\\nSo in summary, it defines the core infrastructure needed to implement death tests in Google Test - including abstract base classes, enums, macros, and helper functions.\&quot;,\&quot;/googletest/googletest/test/googletest-json-output-unittest.py\&quot;:\&quot;This file contains unit tests for Google Test\\u0027s JSON output functionality.\\n\\nKey things it does:\\n\\n- Defines test cases that inherit from gtest_test_utils.TestCase\\n- Tests the JSON output against expected output for:\\n  - Non-empty output\\n  - No tests\\n  - Filtered tests\\n  - Default output file name\\n  - Suppressed output\\n- Helper functions:\\n  - _GetJsonOutput() - Runs a GTest program and returns the JSON output\\n  - _TestJsonOutput() - Checks JSON output against expected\\n  - testTimestampValue() - Checks timestamp format\\n\\nKey functions:\\n\\n- testNonEmptyJsonOutput() - Tests non-empty JSON output\\n- testNoTestJsonOutput() - Tests output when no tests \\n- testDefaultOutputFile() - Tests default output file name\\n- testSuppressedJsonOutput() - Tests suppressed output\\n- testFilteredTestJsonOutput() - Tests filtered output\\n- _GetJsonOutput() - Runs GTest and returns JSON output\\n- _TestJsonOutput() - Compares actual vs expected JSON\\n\\nSo in summary, it defines unit tests for Google Test\\u0027s JSON reporting functionality, runs various test programs, and verifies the JSON output matches the expected output.\&quot;,\&quot;/googletest/googlemock/test/gmock_test_utils.py\&quot;:\&quot;This file contains utilities for writing and running unit tests for Google Mock, the C++ mocking framework developed by Google.\\n\\nKey functions:\\n\\n- GetSourceDir() - Returns the absolute path of the directory containing the test Python files.\\n\\n- GetTestExecutablePath(executable_name) - Returns the path of the test binary being tested, and aborts if it doesn\\u0027t exist.\\n\\n- GetExitStatus(exit_code) - Returns the exit status code of a subprocess, handling differences between Unix and Windows. \\n\\n- Subprocess, TestCase, environ - Utilities imported from googletest/test/gtest_test_utils.py for running subprocesses and defining test cases.\\n\\n- SetEnvVar - Sets an environment variable for a subprocess. \\n\\n- PREMATURE_EXIT_FILE_ENV_VAR - Constant for environment variable that causes tests to exit early for debugging.\\n\\n- Main() - Runs the unit tests, calling the Main() function from gtest_test_utils.py.\\n\\nSo in summary, it provides utilities for locating test binaries, running tests as subprocesses, and extracting exit codes, while reusing the base test running functionality from Google Test. This allows writing Python unit tests for Google Mock.\&quot;,\&quot;/googletest/docs/_layouts/default.html\&quot;:\&quot;This file defines the default layout template for pages on the GoogleTest documentation site.\\n\\nKey functions:\\n\\n- Defines the overall HTML structure with \\u003chead\\u003e, \\u003cbody\\u003e, etc.\\n\\n- Includes CSS stylesheets and JavaScript files for functionality\\n\\n- Sets up Google Analytics tracking code\\n\\n- Defines the sidebar navigation area \\n\\n- Loops through navigation data to generate sidebar links\\n\\n- Defines the main content area\\n\\n- Includes page content variable {{ content }}\\n\\n- Adds footer with links\\n\\n- Uses AnchorJS to add anchors to headers for linking\\n\\nSo in summary, it provides the common wrapper and layout for all pages on the site, including the navigation, headers, footers, and includes the page-specific content. This allows each documentation page to focus just on its own content without repeating common structural elements.\&quot;,\&quot;/Headers/BFS.h\&quot;:\&quot;This file defines a class called BFS that implements a breadth-first search (BFS) algorithm for solving the 8-puzzle problem.\\n\\nKey functions:\\n\\n- search() - The main function that runs the BFS algorithm.\\n\\n- BFS(const std::vector\\u003cint\\u003e\\u0026 grid) - Constructor that takes the initial puzzle state as a vector. \\n\\n- bfs() - The core BFS search logic. Returns true if a solution is found, false otherwise. \\n\\n- explored - Set to keep track of visited states to avoid revisiting.\\n\\n- parentMap - Map to track the parent state of each visited state. \\n\\n- frontier - Queue to hold the frontier of states to explore. \\n\\nIt also tracks and stores various metrics about the search like the solution path, number of nodes expanded, maximum depth reached, and running time.\\n\\nSo in summary, this class implements a basic BFS algorithm for solving 8-puzzles, tracking search progress and results.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-assertion-result.h\&quot;:\&quot;This file defines the AssertionResult class in Google Test.\\n\\nKey functions:\\n\\n- Constructor - Constructs an AssertionResult object to indicate success or failure of an assertion.\\n\\n- operator bool() - Returns true if the assertion succeeded. \\n\\n- operator!() - Returns the negation of the assertion result. \\n\\n- message() - Returns the message streamed into the assertion result, describing the failure condition.\\n\\n- operator\\u003c\\u003c() - Streams a custom failure message into the assertion result.\\n\\n- operator\\u003c\\u003c() - Allows streaming basic output manipulators like endl into the result. \\n\\n- AssertionSuccess() - Static function to create a successful assertion result.\\n\\n- AssertionFailure() - Static function to create a failed assertion result. \\n\\n- AssertionFailure() overload - Creates a failed result with a given failure message.\\n\\nThe AssertionResult class is used to represent the outcome of an assertion. It stores whether the assertion succeeded or failed, and optionally a failure message. Various functions allow constructing, querying and streaming to AssertionResult objects. This allows reporting detailed failure messages from assertions in Google Test.\&quot;,\&quot;/googletest/googlemock/test/gmock_link_test.h\&quot;:\&quot;This file tests that Google Mock mock classes and matchers can be defined and used across multiple translation units without causing link errors.\\n\\nKey things it does:\\n\\n- Defines an Interface class and Mock class that mock it. These are included in multiple source files to test linkage.\\n\\n- Defines various helper classes and functions used to test actions and matchers.\\n\\n- Contains tests that:\\n  - Define expectations using various actions like Return, ReturnRef, Invoke, etc.\\n  - Verify expectations on a Mock object.\\n  - Define expectations using various matchers like Eq, ContainsRegex, ElementsAre, etc.\\n\\nSome key functions/classes:\\n\\n- Interface - base class being mocked\\n- Mock - derived mock class \\n- InvokeHelper - helper functions for testing Invoke actions\\n- FieldHelper - helper class for testing Field matcher\\n- Tests - define and verify expectations using different actions/matchers\\n\\nSo in summary, it provides definitions needed to test that Google Mock constructs can be used across translation units without link errors. The tests exercise a wide range of actions and matchers.\&quot;,\&quot;/googletest/docs/platforms.md\&quot;:\&quot;This file documents the supported platforms for GoogleTest, Google\\u0027s C++ testing framework.\\n\\nSome key points:\\n\\n- It links to Google\\u0027s Foundational C++ Support Policy, which outlines which compilers, platforms and build tools Google aims to support for its C++ libraries and frameworks.\\n\\n- It links to a table in the oss-policies-info GitHub repo that lists the specific compiler, platform and build tool versions that GoogleTest currently supports according to this policy. \\n\\n- This gives developers an overview of where GoogleTest is tested and guaranteed to work, rather than having undefined or broken behavior. It helps set expectations for supported environments.\\n\\n- By adhering to Google\\u0027s foundational C++ support policy, GoogleTest aims to support mainstream and modern compiler/platform combinations used by many C++ developers. This improves compatibility and usability.\\n\\n- The file serves as documentation for developers on which platforms they can confidently use GoogleTest on without encountering support or compilation issues.\\n\\nSo in summary, the key function of this file is to document the supported platforms for GoogleTest in line with Google\\u0027s C++ support policy, to provide clarity on where it is tested and guaranteed to work. This is important information for developers evaluating and using the framework.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-port.h\&quot;:\&quot;This file (gtest-port.h) is part of Google Test, Google\\u0027s C++ testing framework. It contains portability code and definitions that are needed for Google Test to work across different platforms and compilers.\\n\\nSome key things it does:\\n\\n- Defines platform-specific types like file descriptors, stat structures, etc. using wrappers to provide a consistent interface.\\n\\n- Provides wrappers for system/library functions that have different names or signatures across platforms, like file I/O, string functions, threading primitives etc. \\n\\n- Defines macros for things like declaring/defining command line flags in a portable way.\\n\\n- Provides typedefs for integer types of known sizes like int32_t, uint64_t etc.\\n\\n- Defines threading and synchronization primitives like Mutex, MutexLock, ThreadLocal that work across platforms supported by Google Test.\\n\\n- Defines utility functions for parsing command line arguments, environment variables, formatting filenames etc.\\n\\n- Forwards declarations of classes that are used across Google Test like RE (for regex matching), Message (for failure messages).\\n\\nSome key functions include:\\n\\n- posix namespace wrappers for system calls\\n- Mutex, MutexLock classes for locking \\n- ThreadLocal class for thread-local storage\\n- String utilities like StripTrailingSpaces\\n- Parsing functions like ParseInt32, BoolFromGTestEnv\\n- Logging macros like GTEST_LOG_\\n- Typedefs for integer sizes like TimeInMillis\\n\\nSo in summary, it handles all the platform/compiler differences so that the rest of Google Test source code can focus on the testing framework logic in a portable way.\&quot;,\&quot;/googletest/docs/pkgconfig.md\&quot;:\&quot;This file documents how to use Google Test (GTest) from various build systems using pkg-config.\\n\\nKey points:\\n\\n- Pkg-config is a standard format for specifying build configuration like include paths, compiler flags, library paths and libraries to link. It is supported by most build systems.\\n\\n- CMake example shows how to find and use GTest via pkg-config. It searches for the gtest_main module, gets the include directories, compile flags and link flags/libraries via variables.\\n\\n- If pkg-config can\\u0027t find GTest, you may need to set PKG_CONFIG_PATH to tell it where the .pc files are located, like after a local install. \\n\\n- Cross-compilation is supported by always exporting PKG_CONFIG_ALLOW_SYSTEM_CFLAGS/LIBS and PKG_CONFIG_SYSROOT_DIR. This ensures the sysroot paths are injected into flags instead of using build system paths.\\n\\n- Key functions of the file:\\n  - Explains how to integrate GTest via pkg-config in CMake \\n  - Describes common pkg-config not found error and solution\\n  - Shows how to configure pkg-config for cross-compilation\\n\\nIn summary, it documents best practices for using pkg-config to interface GTest with different build systems, including CMake and cross-compilation.\&quot;,\&quot;/googletest/googletest/test/gtest_xml_output_unittest.py\&quot;:\&quot;This file contains unit tests for Google Test\\u0027s XML output functionality.\\n\\nKey things it does:\\n\\n- Defines expected XML output strings for various test scenarios\\n- Runs test programs that generate XML output and asserts the output matches expectations\\n- Tests basic XML generation with and without tests\\n- Tests XML output when filtering tests by name\\n- Tests XML output when running tests in shards\\n- Tests properties like timestamps are valid\\n- Tests default XML file name is used\\n- Tests XML output is suppressed if listener is shut down\\n\\nKey functions:\\n\\n- testNonEmptyXmlOutput() - Runs a test program and validates XML output \\n- testNoTestXmlOutput() - Tests XML output for program with no tests\\n- testTimestampValue() - Checks timestamp in XML is valid\\n- testDefaultOutputFile() - Checks default XML file name is used\\n- testSuppressedXmlOutput() - Checks XML is suppressed if listener shut down\\n- testFilteredTestXmlOutput() - Tests filtering works in XML output  \\n- testShardedTestXmlOutput() - Tests sharding works in XML output\\n- _GetXmlOutput() - Runs a test program and returns XML output\\n- _TestXmlOutput() - Runs a test program and validates XML output matches expected\\n\\nSo in summary, it contains unit tests that exercise Google Test\\u0027s XML output functionality and validate the output meets expectations.\&quot;,\&quot;/googletest/googletest/samples/sample4.h\&quot;:\&quot;This file defines a sample test program using the Google Test C++ testing framework.\\n\\nIt defines a simple Counter class that acts as a monotonic counter (only increments or decrements, never resets).\\n\\nKey functions of the Counter class:\\n\\n- Increment() - Returns the current counter value and increments it\\n- Decrement() - Returns the current counter value and decrements it  \\n- Print() - Prints the current counter value\\n\\nThe Counter class is meant to be used in tests to verify its increment/decrement behavior works as expected. This file provides the class definition, but does not contain any test code. The test code would go in a separate .cpp file and would exercise the Counter class functions.\\n\\nSo in summary, this file:\\n\\n- Defines a sample Counter class for testing \\n- Provides the class interface for Increment(), Decrement(), Print() functions\\n- Sets up a sample program to be used with Google Test\\n\\nBut it does not contain any actual test code - that would go in a separate .cpp file.\&quot;,\&quot;/googletest/googletest/test/production.h\&quot;:\&quot;This file is part of the unit test for gtest_prod.h, which is part of Google Test.\\n\\nIt declares some classes and functions to test features in gtest_prod.h:\\n\\n- PrivateCode - A class with private members that are tested by friend tests. It declares two friend tests using FRIEND_TEST.\\n\\n- PrivateCodeTest - A friend test declared with FRIEND_TEST that does not use a fixture. It will be able to access the private members of PrivateCode. \\n\\n- PrivateCodeFixtureTest - A friend test declared with FRIEND_TEST that uses a fixture. It also will be able to access the private members of PrivateCode.\\n\\nThe key functions are:\\n\\n- FRIEND_TEST - Declares friend tests that can access the private members of the class they are testing. Used by PrivateCode to declare the two friend tests.\\n\\n- PrivateCode() - Constructor for the PrivateCode class.\\n\\n- int x() const - Accessor method for the private x_ member. \\n\\n- void set_x(int) - Mutator method to set the private x_ member.\\n\\nSo in summary, it declares classes and friend tests to test the FRIEND_TEST functionality in gtest_prod.h for accessing private members from friend tests.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-typed-test.h\&quot;:\&quot;This file implements typed and type-parameterized tests in Google Test.\\n\\nKey things it does:\\n\\n- Defines macros for declaring typed test suites (TYPED_TEST_SUITE) and individual typed tests (TYPED_TEST). These allow writing tests that are repeated for different types.\\n\\n- Defines macros for declaring type-parameterized test suites (TYPED_TEST_SUITE_P) and tests (TYPED_TEST_P). These allow defining abstract test patterns that can be instantiated with different types. \\n\\n- Defines macros for registering type-parameterized tests (REGISTER_TYPED_TEST_SUITE_P) so they can be instantiated.\\n\\n- Defines macros for instantiating type-parameterized test suites with specific types (INSTANTIATE_TYPED_TEST_SUITE_P).\\n\\n- Implements the infrastructure to support the above, including generating unique type names, registering tests, running tests for each type parameter, etc.\\n\\nKey macros/functions:\\n\\n- TYPED_TEST_SUITE - Declare a typed test suite \\n- TYPED_TEST - Declare a typed test\\n- TYPED_TEST_SUITE_P - Declare a type-parameterized test suite\\n- TYPED_TEST_P - Declare a type-parameterized test\\n- REGISTER_TYPED_TEST_SUITE_P - Register type-parameterized tests\\n- INSTANTIATE_TYPED_TEST_SUITE_P - Instantiate tests for given types\\n\\nSo in summary, it provides the macros and implementation to support typed and type-parameterized testing in Google Test.\&quot;,\&quot;/googletest/googletest/test/gtest_skip_check_output_test.py\&quot;:\&quot;This Python file tests Google Test\\u0027s ability to skip tests during environment setup.\\n\\nKey things it does:\\n\\n- Defines a test class SkipEntireEnvironmentTest that inherits from googletest.test.gtest_test_utils.TestCase\\n\\n- Invokes the gtest_skip_in_environment_setup_test binary and captures its output\\n\\n- Defines a test method testSkipEntireEnvironmentTest() that verifies the output:\\n  - Checks it contains a \\\&quot;Skipped\\\&quot; message for a single skipped test\\n  - Checks it contains two \\\&quot;Skipped\\\&quot; messages for an entire fixture being skipped\\n  - Checks it does not contain any \\\&quot;FAILED\\\&quot; messages\\n\\n- Uses regular expressions to search the output\\n\\n- Imports the googletest.test.gtest_test_utils module which provides utilities for running tests and asserting on outputs\\n\\n- Defines the EXE_PATH constant pointing to the test binary \\n\\n- Runs the main() function from gtest_test_utils to execute the tests\\n\\nSo in summary, it:\\n\\n1. Invokes a Google Test program that skips tests\\n2. Asserts on the output to verify skipping behavior \\n3. Leverages utilities from googletest.test.gtest_utils to run the tests\&quot;,\&quot;/googletest/googlemock/include/gmock/internal/custom/gmock-port.h\&quot;:\&quot;This file is a custom porting header for Google Mock. It allows users to customize Google Mock\\u0027s behavior for their environment.\\n\\nSome key things it does:\\n\\n- Includes the copyright and license information for Google Mock.\\n\\n- Provides an \\\&quot;injection point\\\&quot; for users to include their own custom code and configurations. \\n\\n- Has IWYU pragmas to control header visibility - it marks gmock headers as private and gmock tests as friends so they can access internal details.\\n\\n- Defines the GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_ guard to prevent multiple inclusions.\\n\\nIt does not define any functions itself. Its purpose is to allow customization of Google Mock\\u0027s portability layer for things like compiler/platform specifics, rather than providing functionality. Users would include their own code/macros within the injection point as needed.\\n\\nSo in summary, it provides a customization hook and header include/visibility control for porting Google Mock, but does not contain any functions itself.\&quot;,\&quot;/Headers/DFS.h\&quot;:\&quot;This file defines a class called DFS that implements a depth-first search (DFS) algorithm for solving the 8-puzzle problem.\\n\\nKey functions:\\n\\n- search() - The main search function that runs the DFS algorithm.\\n\\n- DFS() constructor - Initializes the DFS solver with the starting puzzle state grid. \\n\\n- dfs() - The recursive depth-first search function. Checks if goal is reached, expands nodes, tracks explored states. \\n\\n- frontier stack - Stores nodes to explore in a stack, following the depth-first approach. \\n\\n- explored set - Tracks states already explored to avoid re-exploring the same state.\\n\\n- parentMap - Maps each state to its parent to reconstruct the solution path. \\n\\n- path vector - Stores the final solution path after search completes.\\n\\n- Various member variables to track metrics like cost, nodes expanded, runtime, max depth reached etc.\\n\\nSo in summary, it implements the core data structures and functions needed to perform a standard depth-first search to solve the 8-puzzle problem, tracking various search statistics.\&quot;,\&quot;/googletest/googletest/test/googletest-throw-on-failure-test.py\&quot;:\&quot;This file tests Google Test\\u0027s throw-on-failure mode when exceptions are disabled.\\n\\nKey things it does:\\n\\n- Defines constants like the path to the test executable and the environment variable/flag name for throw-on-failure mode.\\n\\n- Defines utility functions:\\n  - SetEnvVar() to set/unset environment variables\\n  - Run() to run a command and check its exit code\\n\\n- ThrowOnFailureTest class inherits from gtest_test_utils.TestCase and defines tests:\\n\\n  - RunAndVerify() runs the test executable with different configs and verifies expected failure behavior\\n\\n  - testDefaultBehavior() tests default non-throwing behavior\\n\\n  - testThrowOnFailureEnvVar() tests using the environment variable\\n\\n  - testThrowOnFailureFlag() tests using the command line flag \\n\\n  - testThrowOnFailureFlagOverridesEnvVar() tests that flag overrides env var\\n\\nSo in summary, it:\\n\\n- Sets up the test executable and constants\\n- Defines utils to run tests and set env vars  \\n- Implements unit tests to verify throw-on-failure behavior under different conditions\\n\\nThe key functions are RunAndVerify() to run the tests with different configs, and the individual test_* methods.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-death-test.h\&quot;:\&quot;This file defines macros and functions for writing death tests in Google Test.\\n\\nKey things it does:\\n\\n- Defines macros for writing death tests:\\n  - ASSERT_DEATH/EXPECT_DEATH - Asserts/expects a statement to cause a program exit\\n  - ASSERT_EXIT/EXPECT_EXIT - Asserts/expects a statement to exit with a predicate\\n  - ASSERT_DEBUG_DEATH/EXPECT_DEBUG_DEATH - For death tests in debug mode\\n- Defines predicates for exit status:\\n  - ExitedWithCode\\n  - KilledBySignal \\n- Defines GTEST_UNSUPPORTED_DEATH_TEST for compiling death test macros on platforms without death test support\\n- Declares internal functions like InDeathTestChild()\\n\\nKey functions:\\n\\n- InDeathTestChild() - Returns if currently in death test child process\\n- ExitedWithCode/KilledBySignal predicates - Check exit status \\n- GTEST_UNSUPPORTED_DEATH_TEST - Compiles death test macros on unsupported platforms\\n- GTEST_DEATH_TEST_ - Implementation of the death test macros\\n\\nSo in summary, it provides the public API and implementation for writing and running death tests in Google Test.\&quot;,\&quot;/googletest/googletest/test/gtest_list_output_unittest.py\&quot;:\&quot;This file contains a unit test for Google Test\\u0027s ability to list tests when the --gtest_list_tests flag is passed.\\n\\nKey things it does:\\n\\n- Defines expected XML and JSON output formats for listing tests\\n- Runs a Google Test program that lists tests and outputs to a file\\n- Gets the output file contents and compares to the expected formats\\n- Defines a test case class GTestListTestsOutputUnitTest that inherits from gtest_test_utils.TestCase\\n- Contains test methods:\\n  - testXml() - Runs test listing and verifies XML output matches expected\\n  - testJSON() - Runs test listing and verifies JSON output matches expected\\n  - _GetOutput() - Runs test program and gets output file contents\\n  - _TestOutput() - Compares actual output to expected output\\n\\nSo in summary, it:\\n\\n- Defines expected test listing output formats \\n- Runs a test program that lists tests and outputs to a file\\n- Verifies the output matches the expected formats\\n\\nThis allows testing Google Test\\u0027s ability to list tests when requested and output the listing in XML/JSON formats.\&quot;,\&quot;/googletest/googletest/include/gtest/internal/gtest-string.h\&quot;:\&quot;This file declares functions and classes used internally by Google Test for string handling. It is not meant to be used directly by code outside of Google Test.\\n\\nSome key things it does:\\n\\n- Declares the String class which contains static utility methods for string operations.\\n\\n- Defines string cloning, comparison and conversion functions like CloneCString(), CStringEquals(), AnsiToUtf16(), etc. These provide functionality similar to standard C string functions but can handle NULL strings.\\n\\n- Defines wide string and UTF conversion functions like ShowWideCString(), WideCStringEquals() \\n\\n- Defines case-insensitive string comparison functions like CaseInsensitiveCStringEquals()\\n\\n- Defines formatting functions for integers and bytes like FormatIntWidth2(), FormatHexInt()\\n\\n- Defines StringStreamToString() to get a string from a stringstream, replacing null bytes\\n\\nSo in summary, it provides internal string handling utilities for Google Test that are not part of the standard library, like null-safe versions of common string functions and conversions between string types. The String class collects these static utility methods.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-matchers.h\&quot;:\&quot;This file defines matchers for Google Test (gtest).\\n\\nKey things it does:\\n\\n- Defines the MatcherInterface that all matchers must implement, including MatchAndExplain() and DescribeTo().\\n\\n- Defines the Matcher class template that wraps a MatcherInterface implementation.\\n\\n- Defines common matcher implementations like Eq(), Ne(), Lt(), etc that perform equality/comparison checks.\\n\\n- Defines polymorphic matchers like MatchesRegex() and ContainsRegex() that can match different types.\\n\\n- Defines helper functions like MakeMatcher(), MakePolymorphicMatcher() to construct matchers. \\n\\n- Defines specializations of Matcher for std::string to allow direct string comparisons.\\n\\n- Defines MatchResultListener for match explanations.\\n\\nKey functions:\\n\\n- MatchAndExplain() - Core matcher function that performs the match.\\n- DescribeTo() - Describes the matcher. \\n- Eq(), Ne(), Lt() etc - Common comparison matchers.\\n- MatchesRegex(), ContainsRegex() - Polymorphic regex matchers.  \\n- MakeMatcher(), MakePolymorphicMatcher() - Construct matchers.\\n- operator\\u003c\\u003c() - Prints matchers.\\n\\nSo in summary, it provides the core matcher interface and common matcher implementations for use in Google Test assertions.\&quot;,\&quot;/googletest/docs/gmock_faq.md\&quot;:\&quot;This file contains documentation for Google Mock\\u0027s (gMock) legacy FAQ (frequently asked questions).\\n\\nSome key things it covers:\\n\\n- Explains why methods need to be virtual to be mocked, and how to mock non-virtual methods.\\n\\n- Discusses limitations around mocking variadic functions. \\n\\n- Addresses common compiler warnings when defining mock methods with const parameters.\\n\\n- Provides tips for debugging when expectations are not satisfied, like using --gmock_verbose.\\n\\n- Explains how to assert that a function is never called using EXPECT_CALL().Times(0)\\n\\n- Discusses why gMock searches expectations from back to front.\\n\\n- Shows how to define custom actions using Invoke(), MakeAction(), MakePolymorphicAction(), or implementing ActionInterface. \\n\\n- Provides workarounds for issues like running out of memory when compiling large mock classes.\\n\\nSome key functions/APIs it references include:\\n\\n- MOCK_METHOD/MOCK_CONST_METHOD - Define mock methods\\n- EXPECT_CALL - Set expectations  \\n- WillOnce/WillRepeatedly - Set action expectations\\n- DeleteArg - Delete function arguments\\n- Invoke - Invoke custom actions\\n- MakeAction/MakePolymorphicAction - Define custom actions\\n- ActionInterface - Interface for custom action implementations\\n\\nSo in summary, this file documents common questions and issues users may encounter when using gMock, and provides explanations, workarounds and examples to address them.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-function-mocker.h\&quot;:\&quot;This file defines macros and utilities for mocking methods in Google Mock.\\n\\nKey things it does:\\n\\n- Defines the MOCK_METHOD macro which is used to generate mocked method implementations. It handles parsing the method signature and generating the necessary boilerplate code.\\n\\n- Defines macros like MOCK_METHOD0, MOCK_METHOD1, etc to mock methods with different arities (number of parameters).\\n\\n- Handles parsing method modifiers like const, override, final in the method spec. \\n\\n- Defines macros for mocking const methods (MOCK_CONST_METHOD) and methods with different call types (MOCK_METHOD_WITH_CALLTYPE).\\n\\n- Defines utilities for working with method signatures - extracting return type, parameter types, matching arguments to parameters etc. \\n\\n- Implements the actual generation of the mocked method body that delegates to a FunctionMocker object.\\n\\n- Defines the FunctionMocker class template that handles invoking mocked methods and returning mock expectations.\\n\\nKey macros/functions:\\n\\n- MOCK_METHOD - Main macro used to generate mocked method \\n- FunctionMocker - Class that handles mocking individual methods\\n- GMOCK_INTERNAL_MOCK_METHOD_IMPL - Implements generation of mocked method body\\n- GMOCK_INTERNAL_SIGNATURE - Extracts method signature from parameters\\n- GMOCK_INTERNAL_PARAMETER - Generates parameter names in method signature\\n\\nSo in summary, this file provides the core infrastructure for mocking methods with Google Mock using macros.\&quot;,\&quot;/googletest/docs/reference/matchers.md\&quot;:\&quot;This file documents the matchers reference for Google Test.\\n\\nKey things it does:\\n\\n- Defines what a matcher is - a predicate used to match a single argument value.\\n\\n- Documents the built-in matchers provided by Google Test organized into categories like wildcard, comparison, floating point, string, container, member, etc. \\n\\n- Explains how to use matchers with macros like EXPECT_THAT, ASSERT_THAT.\\n\\n- Documents matchers that can be used as predicates like Matches(), Value().\\n\\n- Shows how to define custom matchers using macros like MATCHER(), MATCHER_P(), MATCHER_P2().\\n\\n- Explains composite matchers like AllOf(), AnyOf(), Not().\\n\\n- Documents matchers that adapt other matchers like MatcherCast(), SafeMatcherCast().\\n\\nSo in summary, it provides a comprehensive reference for all the matcher functionality in Google Test - the different types of built-in matchers, how to use them, how to define custom ones, and how to compose matchers. This allows developers to leverage matchers to concisely specify expectations in tests.\&quot;,\&quot;/googletest/docs/gmock_cook_book.md\&quot;:\&quot;This file provides utilities for mocking callbacks in Google Mock.\\n\\nThe key functions/classes it provides are:\\n\\n- MockFunction - Allows mocking std::function callbacks. It has a mock Call() method and AsStdFunction() method to get a std::function proxy. This allows setting expectations on the callback and passing the proxy to code under test.\\n\\n- InvokeArgument - An action that invokes one of the arguments passed to a mock function. This allows invoking callback arguments passed to a mock. \\n\\n- MockCallback - A base class that implements common callback methods like Run(), RunWith(), etc. Derived mock classes can override these to provide mock behavior. \\n\\n- MockAsyncCallback - A MockCallback subclass that adds asynchronous callback methods like RunAsync(), RunAsyncWith() etc. It uses Notification objects to synchronize asynchronous calls.\\n\\n- MockCompletionCallback - A MockCallback subclass for asynchronous callbacks that take a completion callback. It overrides OnCompletion() which can be mocked.\\n\\nSo in summary, it provides utilities for mocking C++ callbacks, especially std::function and asynchronous callbacks, by allowing setting expectations on them and synchronizing asynchronous calls in tests. This allows testing code that depends on callbacks without linking to real callback implementations.\&quot;,\&quot;/googletest/googletest/include/gtest/gtest-printers.h\&quot;:\&quot;This file implements printing functionality for Google Test.\\n\\nKey functions:\\n\\n- UniversalPrinter - The main printer class template that dispatches printing to the appropriate overload based on the type.\\n\\n- PrintTo - Overloads for printing built-in and common types like strings, arrays, tuples, pairs, etc. These are picked up via ADL by UniversalPrinter. \\n\\n- FormatForComparison - Special formatting for values used in comparisons, to print C strings as strings if the other operand is a string for example.\\n\\n- UniversalPrint - Prints a value using the compiler inferred type. \\n\\n- UniversalTersePrint - Prints a value tersely, omitting addresses for references.\\n\\n- UniversalTersePrintTupleFieldsToStrings - Prints tuple fields tersely to a string vector.\\n\\n- PrintToString - Converts a value to a string by printing to a stringstream.\\n\\nSo in summary, it implements printing of any type T by overloading PrintTo for common types, and using UniversalPrinter as the main dispatcher. This allows values to be printed for assertions, comparisons and other output in Google Test.\&quot;,\&quot;/googletest/docs/reference/testing.md\&quot;:\&quot;This file documents the reference for writing tests using Google Test (GTest), Google\\u0027s C++ testing framework.\\n\\nSome key things it covers:\\n\\n- Test macros like TEST, TEST_F, TEST_P for defining individual tests.\\n\\n- Class and type definitions related to tests like Test, TestFixture, TestInfo, TestResult.\\n\\n- Functions for setting up and running tests like InitGoogleTest, RUN_ALL_TESTS. \\n\\n- Parameterized, typed and other advanced test features.\\n\\nKey functions defined include:\\n\\n- TEST, TEST_F, TEST_P - Define individual tests\\n- INITIATE_TEST_SUITE_P - Instantiate parameterized tests  \\n- RUN_ALL_TESTS - Runs all tests\\n- Test - Base test class\\n- TestFixture - Base for test fixtures  \\n- TestInfo - Holds info about a test\\n- TestResult - Holds result of a test\\n- InitGoogleTest - Initialize GTest \\n- AddGlobalTestEnvironment - Add global test environment\\n- RegisterTest - Dynamically register a test\\n\\nSo in summary, this file documents all the core classes, macros and functions provided by GTest for writing, configuring and running C++ tests in a standardized way. It serves as the main reference for the GTest API.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock.h\&quot;:\&quot;This file is the main header file for Google Mock, a framework for writing C++ mock classes.\\n\\nKey things it does:\\n\\n- Defines the main Google Mock namespace testing::\\n\\n- Declares the InitGoogleMock function, which must be called before running tests to initialize Google Mock and parse command line flags. There are overloaded versions for Windows UNICODE and Arduino platforms.\\n\\n- Declares Google Mock flags like catch_leaked_mocks that can be accessed programmatically. \\n\\n- Includes other Google Mock header files that define the core functionality:\\n\\n  - gmock-actions.h - Defines action matchers like Return(), SaveArg(), etc.\\n\\n  - gmock-cardinalities.h - Defines cardinality matchers like Times(), AtLeast(), etc.\\n\\n  - gmock-function-mocker.h - Defines the ON_CALL and EXPECT_CALL macros.\\n\\n  - gmock-matchers.h - Defines value matchers like Eq(), StrEq(), NotNull(), etc.\\n\\n  - gmock-more-actions.h - Defines additional action matchers.\\n\\n  - gmock-more-matchers.h - Defines additional value matchers.\\n\\n  - gmock-nice-strict.h - Defines macros for nice and strict expectations.\\n\\nSo in summary, it provides the main namespace, initialization function, flag declarations, and includes the headers that define the core mocking functionality.\&quot;,\&quot;/googletest/docs/samples.md\&quot;:\&quot;This file provides an overview of sample code available for Google Test (googletest), Google\\u0027s C++ testing framework.\\n\\nThe key points:\\n\\n- It directs the reader to the googletest/samples folder on GitHub which contains example test code demonstrating various googletest features.\\n\\n- It lists 10 sample programs and briefly describes what each one shows:\\n  - Basic unit testing of C++ functions\\n  - Testing a class with multiple member functions\\n  - Using test fixtures \\n  - Integrating googletest and googletest.h\\n  - Sharing test logic across fixtures\\n  - Parameterized tests\\n  - Value-parameterized tests\\n  - Combining values in parameterized tests\\n  - Customizing console output using listeners\\n  - Implementing a memory leak checker using listeners\\n\\n- The samples provide code examples for learning how to use major googletest features like:\\n  - Writing unit tests\\n  - Test fixtures\\n  - Parameterized tests\\n  - Listeners (for custom output and inspection of results)\\n\\n- The key functions demonstrated across the samples include:\\n  - TEST, TEST_F, etc for defining tests\\n  - ASSERT_EQ, EXPECT_TRUE, etc for assertions\\n  - FIXTURE for defining test fixtures\\n  - Combine() for parameterized tests\\n  - Listeners for customizing output\\n\\nSo in summary, this file directs users to googletest sample code and provides a high-level overview of what each sample demonstrates to help learn the testing framework\\u0027s capabilities.\&quot;,\&quot;/googletest/googletest/test/gtest_help_test.py\&quot;:\&quot;This file tests the --help flag of the Google Test framework.\\n\\nKey things it does:\\n\\n- Defines constants like the program path, flag prefix, names of specific flags to test\\n- Checks platform/OS specifics like whether it supports death tests\\n- run_with_flag function to run the test program with a given flag and return output\\n- GTestHelpTest test class with tests:\\n  - test_prints_help_with_full_flag verifies help message is printed with --help\\n  - test_runs_tests_without_help_flag verifies tests run without --help \\n  - test_runs_tests_with_gtest_internal_flag verifies tests run with internal flag\\n\\nKey functions:\\n\\n- run_with_flag - runs test program with given flag, returns exit code and output\\n- is_bsd_based_os - checks if OS is BSD-based \\n- Main - runs the tests\\n\\nSo in summary, it tests the behavior of the Google Test help flag and ensures help is shown with --help but tests run without it or with an internal flag.\&quot;,\&quot;/googletest/googletest/test/googletest-param-test-invalid-name2-test.py\&quot;:\&quot;This Python file tests Google Test\\u0027s handling of invalid parameterized test names.\\n\\nKey things it does:\\n\\n- Defines a COMMAND variable with the path to the test binary being tested. This binary is expected to have duplicate parameterized test names.\\n\\n- Defines an Assert function to raise an assertion error if a condition is false.\\n\\n- TestExitCodeAndOutput function:\\n  - Runs the COMMAND \\n  - Checks that it terminated by a signal (indicating failure)\\n  - Checks that the expected error message is printed\\n\\n- GTestParamTestInvalidName2Test class:\\n  - Inherits from the gtest_test_utils.TestCase base class\\n  - Defines a test method testExitCodeAndOutput that calls TestExitCodeAndOutput\\n\\n- Main function runs the tests if file is executed directly\\n\\nKey functions:\\n\\n- TestExitCodeAndOutput - Runs the test binary and validates exit code and output\\n- Assert - Raises error if assertion fails  \\n- testExitCodeAndOutput - Test method that calls TestExitCodeAndOutput\\n\\nSo in summary, it tests that Google Test correctly fails and outputs an error when duplicate parameterized test names are used.\&quot;,\&quot;/googletest/googlemock/include/gmock/internal/custom/README.md\&quot;:\&quot;This file describes a customization point in Google Mock/Google Test for user configurations. \\n\\nThe key things it does:\\n\\n- Allows defining custom flags/variables that can be used to configure Google Mock behavior.\\n\\n- It specifies a header file `gmock-port.h` that can be provided by the user to define macros for declaring and defining custom flags.\\n\\n- It lists macros that can be defined in the custom header to declare and define different types of flags - boolean, integer and string flags.\\n\\n- Macros provided to declare flag data types like `GMOCK_DECLARE_bool_`\\n\\n- Macros provided to define flags with default values and documentation like `GMOCK_DEFINE_bool_` \\n\\n- Macros to get and set the value of defined flags at runtime like `GMOCK_FLAG_GET` and `GMOCK_FLAG_SET`.\\n\\nSo in summary, it provides a customization point for users to define their own configuration flags for Google Mock and control their values at runtime via this custom header file mechanism.\&quot;,\&quot;/googletest/googlemock/README.md\&quot;:\&quot;This file provides documentation on Google\\u0027s gMock mocking framework, which is part of the GoogleTest C++ testing framework.\\n\\nKey points:\\n\\n- gMock allows defining mock classes in C++ that can be used to test code that depends on other classes/interfaces. It provides a declarative syntax for defining mocks.\\n\\n- It can handle functions of arbitrary types and overloaded functions. Comes with matchers for validating function arguments. \\n\\n- Provides intuitive syntax for controlling mock behavior - no need for record/replay like other mocking frameworks. \\n\\n- Automatically verifies expectations on mock function calls. Allows ordering constraints to be expressed.\\n\\n- Extensible via custom matchers and actions. Does not use exceptions.\\n\\n- Links to documentation/examples on gMock for Dummies, FAQ, Cookbook and Cheat Sheet.\\n\\nKey functions/capabilities:\\n\\n- Declaring mock classes and functions\\n- Defining expected behavior with matchers, will/wont calls, etc.  \\n- Automatically verifying expectations\\n- Partial/hybrid mocks\\n- Custom matchers and actions\\n- Handling arbitrary function types\\n\\nSo in summary, this file provides an overview of gMock\\u0027s mocking capabilities for C++ unit testing with Google Test.\&quot;,\&quot;/googletest/googlemock/include/gmock/gmock-cardinalities.h\&quot;:\&quot;This file defines cardinalities for Google Mock. Cardinalities specify how many times a mock function is expected to be called.\\n\\nKey things:\\n\\n- CardinalityInterface - Defines the interface for implementing a cardinality. Concrete cardinality classes like AtLeast must implement this.\\n\\n- Cardinality - The base cardinality class that holds a shared pointer to a CardinalityInterface implementation.\\n\\n- Cardinality factory functions:\\n\\n  - AtLeast() \\n  - AtMost()\\n  - AnyNumber() \\n  - Between()\\n  - Exactly()\\n\\nThese create Cardinality objects for common expectations like \\\&quot;at least N calls\\\&quot;.\\n\\n- IsSatisfiedByCallCount() - Checks if a call count satisfies the cardinality\\n \\n- IsSaturatedByCallCount() - Checks if a call count saturates/fully satisfies the cardinality \\n\\n- DescribeTo() - Outputs a description of the cardinality to a stream\\n\\nSo in summary, it defines the core Cardinality class and interfaces for implementing custom cardinalities, along with common pre-defined cardinalities used for expectations.\&quot;,\&quot;/googletest/googletest/samples/prime_tables.h\&quot;:\&quot;This file defines an interface and two implementations for determining if a number is prime or finding the next prime number.\\n\\nKey things:\\n\\n- PrimeTable interface defines virtual functions IsPrime() and GetNextPrime() that implementations must provide\\n\\n- OnTheFlyPrimeTable implements PrimeTable by calculating primes on the fly using basic primality tests \\n\\n- PreCalculatedPrimeTable pre-calculates primes up to a max value and stores in a bool array\\n\\n- IsPrime() checks if a number is prime by testing or looking it up in the precalculated array\\n\\n- GetNextPrime() finds the next prime number by incrementing and testing or searching the precalculated array\\n\\n- PreCalculatedPrimeTable constructor takes a max, allocates a bool array of that size, and precalculates primes up to max\\n\\n- CalculatePrimesUpTo() does the precalculation by starting at 2 and marking multiples of each prime as composite\\n\\nSo in summary, it provides an interface and two implementations for primality testing - one calculates on demand, one precalculates for optimization. This is used for parameterized tests in Google Test.\&quot;}&quot;}" />
  </component>
</project>